import getCurrentScript from "./utils/getCurrentScript";
import loadScript from "./utils/loadScript";
import resolvePath from "./utils/resolvePath";
import * as plugin from "./utils/plugin";
import globalName from "./utils/global-name";

// 模块缓存列表
const modules = {};

// 当前已注册但未分配url的模块
var currentModule = null;

function register(moduleId, module){
    let info = plugin.task("register", {
        moduleId: moduleId,
        module: module
    });

    modules[info.moduleId] = info.module;
}

function get(moduleId){
    let info = plugin.task("get", {
        moduleId: moduleId
    });

    info.moduleId = resolvePath(info.moduleId);

    return modules[info.moduleId];
}

// 同步获取某个模块
function loader(scriptUrl){
    return get(scriptUrl);
}

// 注册一个模块
loader.register = function(module){
    let currentScript = getCurrentScript();
    if(currentScript){
        register(currentScript.src, module);
    }else{
        currentModule = module;
    }
};

// 异步加载一个模块
loader.async = function(
    scriptUrl,
    onSuccess = module => {},
    onError = error => console.error(error)
){
    let info = plugin.task("load", {
        url: scriptUrl
    });

    var module = get(info.url);
    if(module){
        return onSuccess(module);
    }else{
        loadScript(info.url, function(error){
            if(error){
                onError(error);
            }else{
                loader.loaded(info.url);
                onSuccess(get(info.url));
            }
        });
    }
}

// 加载器插件
loader.plugin = function(point, _plugin){
    plugin.register(point, _plugin);
};

// 加载器提供的工具方法
loader.utils = {
    resolvePath,
    loadScript,
    getCurrentScript
};

// 将加载器挂载到window上用户指定的名称
globalName(loader);

// 模块加载完成，currentScript获取不到时的兜底方案，一般不需要使用
loader.loaded = function(scriptUrl){
    if(currentModule){
        register(resolvePath(scriptUrl), currentModule);
    }
}

export default loader;