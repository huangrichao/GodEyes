var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var toString = {}.toString;
var objectProto = Object.prototype;
var isType = function isType(value, type) {
  return toString.call(value) === '[object ' + type + ']';
};

function isNull(value) {
  return value === null;
}
function isUndefined(value) {
  return value === undefined;
}
function isObject(value) {
  /**
   * isObject({}) => true
   * isObject([1, 2, 3]) => true
   * isObject(Function) => true
   * isObject(null) => false
   */
  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
  return value !== null && type === 'object' || type === 'function';
}
function isObjectLike(value) {
  /**
   * isObjectLike({}) => true
   * isObjectLike([1, 2, 3]) => true
   * isObjectLike(Function) => false
   * isObjectLike(null) => false
   */
  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null;
}

var checkType = {
  getType: function getType(value) {
    return toString.call(value).replace(/^\[object /, '').replace(/\]$/, '');
  },

  isArray: Array.isArray ? Array.isArray : function (value) {
    return isType(value, 'Array');
  },
  isArrayLike: function isArrayLike(value) {
    /**
     * isArrayLike([1, 2, 3]) => true
     * isArrayLike(document.body.children) => true
     * isArrayLike('abc') => true
     * isArrayLike(Function) => false
     */
    return value !== null && typeof value !== 'function' && isFinite(value.length);
  },

  // isFinite,
  isNil: function isNil(value) {
    /**
     * isNil(null) => true
     * isNil() => true
     */
    return isUndefined(value) || isNull(value);
  },

  isNull: isNull,
  isType: isType,
  isObject: isObject,
  isObjectLike: isObjectLike,
  isPlainObject: function isPlainObject(value) {
    /**
     * isObjectLike(new Foo) => false
     * isObjectLike([1, 2, 3]) => false
     * isObjectLike({ x: 0, y: 0 }) => true
     * isObjectLike(Object.create(null)) => true
     */
    if (!isObjectLike(value) || !isType(value, 'Object')) {
      return false;
    }
    if (Object.getPrototypeOf(value) === null) {
      return true;
    }
    var proto = value;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(value) === proto;
  },
  isPrototype: function isPrototype(value) {
    var Ctor = value && value.constructor;
    var proto = typeof Ctor === 'function' && Ctor.prototype || objectProto;
    return value === proto;
  },

  isUndefined: isUndefined
};

// common types
['Arguments', 'Boolean', 'Date', 'Error', 'Function', 'Number', 'RegExp', 'String'].forEach(function (type) {
  checkType['is' + type] = function (value) {
    return isType(value, type);
  };
});

module.exports = checkType;