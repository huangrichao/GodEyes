var isFunction = require('./type/isFunction');
var toArray = require('./toArray');
var objectUtil = require('./object');

var mix = objectUtil.mix;

var classUtil = {
  extend: function extend(subclass, superclass, overrides, staticOverrides) {
    // 如果只提供父类构造函数，则自动生成子类构造函数
    if (!isFunction(superclass)) {
      overrides = superclass;
      superclass = subclass;
      subclass = function subclass() {};
    }

    var create = Object.create ? function (proto, c) {
      return Object.create(proto, {
        constructor: {
          value: c
        }
      });
    } : function (proto, c) {
      function Tmp() {}
      Tmp.prototype = proto;
      var o = new Tmp();
      o.constructor = c;
      return o;
    };

    var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype
    subclass.prototype = mix(superObj, subclass.prototype); // 指定子类的prototype
    subclass.superclass = create(superclass.prototype, superclass);
    mix(superObj, overrides);
    mix(subclass, staticOverrides);
    return subclass;
  },
  augment: function augment(c) {
    var args = toArray(arguments);
    for (var i = 1; i < args.length; i++) {
      var obj = args[i];
      if (isFunction(obj)) {
        obj = obj.prototype;
      }
      mix(c.prototype, obj);
    }
  }
};

module.exports = classUtil;