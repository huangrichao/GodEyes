/// <reference types="react" />

import React from "react";

export interface GatewayProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 指定渲染children的容器
   */
  container?: any;
}

export class Gateway extends React.Component<GatewayProps, any> {}

export interface PopupProps extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 弹层相对于target的定位, 详见开发指南的[定位部分](#定位)
   */
  align?: string;

  /**
   * 弹层相对于target定位的微调
   */
  offset?: Array<any>;

  /**
   * 触发弹层显示或者隐藏的元素
   */
  trigger?: any;

  /**
   * 触发弹层显示的类型
   */
  triggerType?: string;

  /**
   * 弹层当前显示的状态
   */
  visible?: boolean;

  /**
   * 弹层默认显示的状态
   */
  defaultVisible?: boolean;

  /**
   * 设置此属性，弹层无法打开
   */
  disabled?: boolean;

  /**
   * 弹层在触发以后的延时显示
   */
  delay?: number;

  /**
   * 点击浮层外的区域是否关闭浮层
   */
  canCloseByOutSideClick?: boolean;

  /**
   * 弹层在显示和隐藏触发的事件
   */
  onVisibleChange?: (() => void);

  /**
   * 浮层打开的时候是否让里面的元素自动获取焦点
   */
  autoFocus?: boolean;

  /**
   * 配置动画的播放方式
   */
  animation?: {} | boolean;

  /**
   * 配置弹层定位的参照元素
   */
  target?: any;
}

export class Popup extends React.Component<PopupProps, any> {}

export interface PositionProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 自定义类名
   */
  className?: string;

  /**
   * 定位参照的元素
   */
  target?: any;

  /**
   * 定位的目标元素
   */
  contentNode?: any;

  /**
   * 定位的方式, 详见开发指南的[定位部分](#定位)
   */
  align?: string | boolean;

  /**
   * 相对于target定位的微调
   */
  offset?: Array<any>;

  /**
   * 定位完成前触发的事件
   */
  beforePosition?: (() => void);

  /**
   * 定位完成后触发的事件
   */
  onPosition?: (() => void);

  /**
   * 是否自动调整定位的位置
   */
  needAdjust?: boolean;

  /**
   * 是否监听Resize事件
   */
  needListenResize?: boolean;

  /**
   * 强制更新定位信息
   */
  shouldUpdatePosition?: boolean;

  /**
   * 对齐方式
   */
  isRtl?: boolean;
}

export class Position extends React.Component<PositionProps, any> {}
export interface OverlayProps
  extends React.HtmlHTMLAttributes<HTMLHtmlElement> {
  /**
   * 样式类名的品牌前缀
   */
  prefix?: string;

  /**
   * 自定义类名
   */
  className?: string;

  /**
   * 自定义样式对象
   */
  style?: React.CSSProperties;

  /**
   * 浮层内容
   */
  children?: any;

  /**
   * 是否显示浮层, 如果此属性为false，浮层不会被渲染
   */
  visible?: boolean;

  /**
   * 是否支持esc按键关闭浮层
   */
  canCloseByEsc?: boolean;

  /**
   * 点击浮层外的区域是否关闭浮层
   */
  canCloseByOutSideClick?: boolean;

  /**
   * 点击遮罩区域是否关闭浮层
   */
  canCloseByMask?: boolean;

  /**
   * 配置动画的播放方式
   */
  animation?: {} | boolean;

  /**
   * 配置浮层定位的参照元素
   */
  target?: any;

  /**
   * 浮层相对于target的定位, 详见开发指南的[定位部分](#定位)
   */
  align?: string | boolean;

  /**
   * 浮层相对于target定位的微调
   */
  offset?: Array<any>;

  /**
   * 浮层关闭前触发的事件
   */
  beforeClose?: (() => void);

  /**
   * 浮层关闭后触发的事件
   */
  onClose?: (() => void);

  /**
   * 浮层关闭后触发的事件, 如果有动画，则在动画结束后触发
   */
  afterClose?: (() => void);

  /**
   * 浮层打开前触发的事件
   */
  beforeOpen?: (() => void);

  /**
   * 浮层打开后触发的事件
   */
  onOpen?: (() => void);

  /**
   * 浮层打开后触发的事件, 如果有动画，则在动画结束后触发
   */
  afterOpen?: (() => void);

  /**
   * 浮层请求关闭触发的事件
   */
  onRequestClose?: (() => void);

  /**
   * 浮层定位完成前触发的事件
   */
  beforePosition?: (() => void);

  /**
   * 浮层定位完成后触发的事件
   */
  onPosition?: (() => void);

  /**
   * 浮层打开的时候是否让里面的元素自动获取焦点
   */
  autoFocus?: boolean;

  /**
   * 是否显示遮罩
   */
  hasMask?: boolean;

  /**
   * 隐藏时是否保留子节点
   */
  cache?: boolean;

  /**
   * 安全节点,当点击document的时候, 如果包含该节点则不会关闭浮层, 如果是函数需要返回ref, 如果是字符串则是该DOM的id, 也可以直接传入DOM节点
   */
  safeNode?: any;

  /**
   * 浮层的根节点的样式类
   */
  wrapperClassName?: string;

  /**
   * 指定渲染组件的容器
   */
  container?: any;

  /**
   * 强制更新定位信息
   */
  shouldUpdatePosition?: boolean;

  /**
   * 是否自动调整定位的位置
   */
  needAdjust?: boolean;

  /**
   * 是否禁用页面滚动
   */
  disableScroll?: boolean;
}

export default class Overlay extends React.Component<OverlayProps, any> {
  static Gateway: typeof Gateway;
  static Popup: typeof Popup;
  static Position: typeof Position;
}
