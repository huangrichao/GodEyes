'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames6 = require('classnames');

var _classnames7 = _interopRequireDefault(_classnames6);

var _nextIcon = require('../../../next-icon/lib/index.js');

var _nextIcon2 = _interopRequireDefault(_nextIcon);

var _nextDropdown = require('../../../next-dropdown/lib/index.js');

var _nextDropdown2 = _interopRequireDefault(_nextDropdown);

var _nextMenu = require('../../../next-menu/lib/index.js');

var _nextMenu2 = _interopRequireDefault(_nextMenu);

var _nextAnimate = require('../../../next-animate/lib/index.js');

var _nextAnimate2 = _interopRequireDefault(_nextAnimate);

var _nextDom = require('../../../next-dom/lib/index.js');

var _nextDom2 = _interopRequireDefault(_nextDom);

var _nextUtil = require('../../../next-util/lib/index.js');

var _nextUtil2 = _interopRequireDefault(_nextUtil);

var _utils = require('./utils.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var tabTriggerEvents = {
    CLICK: 'click',
    HOVER: 'hover'
};

function noop() {}

var Nav = (_temp = _class = function (_React$Component) {
    _inherits(Nav, _React$Component);

    function Nav(props, context) {
        _classCallCheck(this, Nav);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

        _this._navRefHandler = function (ref) {
            _this.nav = (0, _reactDom.findDOMNode)(ref);
        };

        _this._activeTabRefHandler = function (ref) {
            _this.activeTab = ref;
        };

        _this.onPrevClick = function () {
            var navWrapNodeWH = _this._getOffsetWH(_this.navWrap);
            _this._setOffset(_this.state.offset + navWrapNodeWH);
        };

        _this.onNextClick = function () {
            var navWrapNodeWH = _this._getOffsetWH(_this.navWrap);
            _this._setOffset(_this.state.offset - navWrapNodeWH);
        };

        _this.handleWindowResized = function () {
            /* istanbul ignore if */
            if (_this.updateTimer) {
                clearTimeout(_this.updateTimer);
            }
            /* istanbul ignore next */
            _this.updateTimer = setTimeout(function () {
                _this._update(_this.props);
                _this._getDropdownItems(_this.props);
                _this._setupStylesForExtraContent(_this.props);
            }, 100);
        };

        _this.state = {
            next: false,
            prev: false,
            offset: 0,
            dropdownTabs: []
        };
        return _this;
    }

    Nav.prototype.componentDidMount = function componentDidMount() {
        this._getDropdownItems(this.props); // 设置下拉菜单
        this._setupStylesForExtraContent(this.props);
        _nextDom2['default'].events.on(window, 'resize', this.handleWindowResized);
    };

    Nav.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var _props = this.props,
            tabPosition = _props.tabPosition,
            resDirection = _props.resDirection;

        if (nextProps.tabPosition !== tabPosition && nextProps.resDirection !== resDirection) {
            this._setOffset(0);
            this._update();
        }
    };

    Nav.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        if (this.props.resDirection === 'horizontal' && this._isNextPrevShown(this.state) !== this._isNextPrevShown(prevState)) {
            this._scrollToActiveTab();
        }
        if (this.props.resDirection === 'vertical' && prevProps.panels && this.props.panels && prevProps.panels.length !== this.props.panels.length) {
            this._getDropdownItems(this.props);
        }
        this._update();
    };

    Nav.prototype.componentWillUnmount = function componentWillUnmount() {
        _nextDom2['default'].events.off(window, 'resize', this.handleWindowResized);
    };

    Nav.prototype._update = function _update() {
        var navNodeWH = this._getOffsetWH(this.nav);
        var navWrapNodeWH = this._getOffsetWH(this.navWrap);

        var minOffset = navWrapNodeWH - navNodeWH;
        var _state = this.state,
            next = _state.next,
            prev = _state.prev,
            offset = _state.offset;

        if (minOffset >= 0) {
            next = false;
            this._setOffset(0);
            offset = 0;
        } else if (minOffset < offset) {
            next = true;
        } else {
            next = false;
            this._setOffset(minOffset);
            offset = minOffset;
        }

        if (offset < 0) {
            prev = true;
        } else {
            prev = false;
        }

        this._setNext(next);
        this._setPrev(prev);

        var nextPrev = {
            next: next,
            prev: prev
        };

        return nextPrev;
    };

    // 如果存在 tabBarExtraContent 则为其设置默认样式，以满足其展示需求


    Nav.prototype._setupStylesForExtraContent = function _setupStylesForExtraContent(_ref) {
        var tabPosition = _ref.tabPosition,
            contentHeight = _ref.contentHeight,
            tabBarExtraContent = _ref.tabBarExtraContent;

        if (tabBarExtraContent && !(0, _utils.isIE8)()) {
            var scrollHeight = (0, _utils.getHeight)(this.navScroll);
            if (tabPosition === 'left' || tabPosition === 'right') {
                var extraHeight = (0, _utils.getHeight)(this.extra);
                var newBarHeight = void 0;
                if (contentHeight > scrollHeight + extraHeight) {
                    newBarHeight = contentHeight;
                } else {
                    newBarHeight = scrollHeight + extraHeight;
                }
                this.tabBar.style.height = newBarHeight + 'px';
                this.extra.style.position = 'absolute';
                this.extra.style.bottom = 0;
            } else {
                this.extra.style.float = 'right';
                this.extra.style.lineHeight = scrollHeight + 'px';
            }
        }
    };

    // 获取导航的项目


    Nav.prototype._getTabs = function _getTabs() {
        var _this2 = this;

        var _props2 = this.props,
            prefix = _props2.prefix,
            panels = _props2.panels,
            activeKey = _props2.activeKey;

        var rst = [];

        _react2['default'].Children.forEach(panels, function (child) {
            var _classnames;

            /*eslint-disable eqeqeq*/
            var isActive = activeKey == child.key;
            var cls = (0, _classnames7['default'])((_classnames = {}, _defineProperty(_classnames, prefix + '-tab', true), _defineProperty(_classnames, 'disabled', child.props.disabled), _defineProperty(_classnames, 'active', isActive), _defineProperty(_classnames, child.props.tabClassName, !!child.props.tabClassName), _classnames));

            var events = {};

            if (!child.props.disabled) {
                events = {
                    onClick: _this2.onNavItemClick.bind(_this2, child.key, child.props.onClick),
                    onMouseEnter: _this2.onNavItemMouseEnter.bind(_this2, child.key, child.props.onMouseEnter),
                    onMouseLeave: _this2.onNavItemMouseLeave.bind(_this2, child.key, child.props.onMouseLeave)
                };
            }

            // [1.x] itemStyle 废弃，使用 tabStyle 替代
            if (child.props.itemStyle) {
                _nextUtil2['default'].log.deprecated('itemStyle', 'tabStyle', 'TabPane');
            }

            var tabInnerStyle = child.props.tabStyle || child.props.itemStyle || null;

            rst.push(_react2['default'].createElement(
                'div',
                _extends({
                    role: 'tab',
                    key: child.key,
                    ref: isActive ? _this2._activeTabRefHandler : undefined,
                    'aria-disabled': child.props.disabled ? 'true' : 'false',
                    'aria-selected': isActive ? 'true' : 'false',
                    className: cls
                }, events),
                _react2['default'].createElement(
                    'div',
                    { className: prefix + '-tab-inner', style: tabInnerStyle },
                    child.props.tab
                )
            ));
        });
        return rst;
    };

    Nav.prototype._getDropdownItems = function _getDropdownItems(_ref2) {
        var resDirection = _ref2.resDirection,
            panels = _ref2.panels;

        if (resDirection !== 'vertical') {
            return;
        }

        var wrapperWidth = (0, _utils.getWidth)(this.navWrap);
        var childNodes = this.nav.childNodes;

        var index = void 0;
        var total = panels.length;
        var tabsWidth = 0;
        for (index = 0; index < total; index++) {
            tabsWidth += childNodes[index].offsetWidth;
            if (tabsWidth > wrapperWidth) {
                break;
            }
        }

        if (index > 1) {
            this.setState({
                dropdownTabs: panels.slice(index)
            });
        }
    };

    Nav.prototype._getOffsetWH = function _getOffsetWH(node) {
        var tabPosition = this.props.tabPosition;

        var prop = void 0;
        if (tabPosition === 'left' || tabPosition === 'right') {
            prop = 'offsetHeight';
        } else {
            prop = 'offsetWidth';
        }
        return node[prop];
    };

    Nav.prototype._getOffsetLT = function _getOffsetLT(node) {
        var tabPosition = this.props.tabPosition;

        var prop = void 0;
        if (tabPosition === 'top' || tabPosition === 'bottom') {
            prop = 'left';
        } else {
            prop = 'top';
        }
        return node.getBoundingClientRect()[prop];
    };

    // 设置 nav 在点击 next/prev 时的偏移


    Nav.prototype._setOffset = function _setOffset(offset) {
        var tabPosition = this.props.tabPosition;

        var state = this.state;
        var target = Math.min(0, offset);
        if (state.offset !== target) {
            this.setState({
                offset: target
            });
        }

        var navOffset = void 0;
        var transformPropery = (0, _utils.getTransformPropertyName)();
        if (tabPosition === 'left' || tabPosition === 'right') {
            if (transformPropery) {
                navOffset = {
                    name: transformPropery,
                    value: 'translate3d(0, ' + target + 'px, 0)'
                };
            } else {
                navOffset = {
                    name: 'top',
                    value: target + 'px'
                };
            }
        } else if (transformPropery) {
            navOffset = {
                name: transformPropery,
                value: 'translate3d(' + target + 'px, 0, 0)'
            };
        } else {
            navOffset = {
                name: 'top',
                value: target + 'px'
            };
        }
        this.nav.style[navOffset.name] = navOffset.value;
    };

    Nav.prototype._setNext = function _setNext(v) {
        if (this.state.next !== v) {
            this.setState({
                next: v
            });
        }
    };

    Nav.prototype._setPrev = function _setPrev(v) {
        if (this.state.prev !== v) {
            this.setState({
                prev: v
            });
        }
    };

    Nav.prototype._isNextPrevShown = function _isNextPrevShown(state) {
        if (state) {
            return state.next || state.prev;
        }
        return this.state.next || this.state.prev;
    };

    Nav.prototype._setNextPrev = function _setNextPrev(nextPrev, callback) {
        this.setState(nextPrev, callback);
    };

    Nav.prototype._scrollToActiveTab = function _scrollToActiveTab() {
        if (this.activeTab) {
            var activeTabWH = this._getOffsetWH(this.activeTab);
            var navWrapNodeWH = this._getOffsetWH(this.navWrap);
            var offset = this.state.offset;

            var wrapOffset = this._getOffsetLT(this.navWrap);
            var activeTabOffset = this._getOffsetLT(this.activeTab);
            if (wrapOffset > activeTabOffset) {
                offset += wrapOffset - activeTabOffset;
                this._setOffset(offset);
            } else if (wrapOffset + navWrapNodeWH < activeTabOffset + activeTabWH) {
                offset -= activeTabOffset + activeTabWH - (wrapOffset + navWrapNodeWH);
                this._setOffset(offset);
            }
        }
    };

    Nav.prototype._instanceRefHandler = function _instanceRefHandler(attr, ref) {
        this[attr] = ref;
    };

    Nav.prototype.onNavItemClick = function onNavItemClick(key, callback, e) {
        e.stopPropagation();
        this.props.onTabEvent(tabTriggerEvents.CLICK, key);
        if (callback) {
            callback(key);
        }
    };

    Nav.prototype.onMenuItemClick = function onMenuItemClick(callback, key) {
        this.props.onTabEvent(tabTriggerEvents.CLICK, key);
        if (callback) {
            callback(key);
        }
    };

    Nav.prototype.onNavItemMouseEnter = function onNavItemMouseEnter(key, callback, e) {
        e.stopPropagation();
        this.props.onTabEvent(tabTriggerEvents.HOVER, key);
        if (callback) {
            callback(key, e);
        }
    };

    Nav.prototype.onNavItemMouseLeave = function onNavItemMouseLeave(key, callback, e) {
        e.stopPropagation();
        if (callback) {
            callback(key, e);
        }
    };

    Nav.prototype._renderDropdownMenus = function _renderDropdownMenus() {
        var _this3 = this,
            _classnames2;

        var tabs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

        if (!tabs.length) {
            return null;
        }

        var menus = tabs.map(function (panel) {
            var selected = panel.key === _this3.props.activeKey;
            return _react2['default'].createElement(
                _nextMenu2['default'].Item,
                { key: panel.key, onClick: _this3.onMenuItemClick.bind(_this3, panel.props.onClick), selected: selected },
                panel.props.tab
            );
        });

        var restBtnCls = (0, _classnames7['default'])((_classnames2 = {}, _defineProperty(_classnames2, this.props.prefix + '-tab-down', 1), _defineProperty(_classnames2, 'disabled', !this.state.next), _classnames2));

        var triggerBtn = _react2['default'].createElement(
            'span',
            { unselectable: 'unselectable', className: restBtnCls },
            _react2['default'].createElement(_nextIcon2['default'], { type: 'arrow-down' })
        );

        return _react2['default'].createElement(
            _nextDropdown2['default'],
            { align: 'tr br', triggerType: 'click', trigger: triggerBtn },
            _react2['default'].createElement(
                _nextMenu2['default'],
                null,
                menus
            )
        );
    };

    Nav.prototype.render = function render() {
        var _classnames5;

        var _props3 = this.props,
            prefix = _props3.prefix,
            resDirection = _props3.resDirection,
            tabBarExtraContent = _props3.tabBarExtraContent,
            onKeyDown = _props3.onKeyDown,
            animation = _props3.animation,
            style = _props3.style;

        var state = this.state;

        var tabs = this._getTabs();

        var nextButton = void 0;
        var prevButton = void 0;
        var restButton = void 0;

        var showNextPrev = state.prev || state.next;

        if (resDirection === 'vertical' && state.next) {
            restButton = this._renderDropdownMenus(state.dropdownTabs);
            prevButton = null;
            nextButton = null;
        } else if (showNextPrev) {
            var _classnames3, _classnames4;

            var prevBtnCls = (0, _classnames7['default'])((_classnames3 = {}, _defineProperty(_classnames3, prefix + '-tab-prev', 1), _defineProperty(_classnames3, 'disabled', !state.prev), _classnames3));
            var nextBtnCls = (0, _classnames7['default'])((_classnames4 = {}, _defineProperty(_classnames4, prefix + '-tab-next', 1), _defineProperty(_classnames4, 'disabled', !state.next), _classnames4));

            prevButton = _react2['default'].createElement(
                'span',
                {
                    onClick: state.prev ? this.onPrevClick : noop,
                    unselectable: 'unselectable',
                    className: prevBtnCls },
                _react2['default'].createElement(_nextIcon2['default'], { type: 'arrow-left' })
            );

            nextButton = _react2['default'].createElement(
                'span',
                {
                    onClick: state.next ? this.onNextClick : noop,
                    unselectable: 'unselectable',
                    className: nextBtnCls },
                _react2['default'].createElement(_nextIcon2['default'], { type: 'arrow-right' })
            );
            restButton = null;
        } else {
            nextButton = null;
            prevButton = null;
            restButton = null;
        }

        var containerCls = (0, _classnames7['default'])((_classnames5 = {}, _defineProperty(_classnames5, prefix + '-nav-container', true), _defineProperty(_classnames5, prefix + '-nav-container-scrolling', showNextPrev), _classnames5));

        return _react2['default'].createElement(
            'div',
            { role: 'tablist', className: prefix + '-bar', tabIndex: '0', onKeyDown: onKeyDown, ref: this._instanceRefHandler.bind(this, 'tabBar') },
            tabBarExtraContent ? _react2['default'].createElement(
                'div',
                { className: prefix + '-nav-extra', ref: this._instanceRefHandler.bind(this, 'extra') },
                tabBarExtraContent
            ) : null,
            _react2['default'].createElement(
                'div',
                { className: containerCls, style: style },
                _react2['default'].createElement(
                    'div',
                    { className: prefix + '-nav-wrap', ref: this._instanceRefHandler.bind(this, 'navWrap') },
                    _react2['default'].createElement(
                        'div',
                        { className: prefix + '-nav-scroll', ref: this._instanceRefHandler.bind(this, 'navScroll') },
                        animation ? _react2['default'].createElement(
                            _nextAnimate2['default'],
                            { animation: prefix + '-nav', singleMode: false, component: 'div', className: prefix + '-nav', ref: this._navRefHandler },
                            tabs
                        ) : _react2['default'].createElement(
                            'div',
                            { className: prefix + '-nav', ref: this._navRefHandler },
                            tabs
                        )
                    )
                ),
                prevButton,
                nextButton,
                restButton
            )
        );
    };

    return Nav;
}(_react2['default'].Component), _class.propTypes = {
    animation: _propTypes2['default'].bool,
    resDirection: _propTypes2['default'].string,
    tabPosition: _propTypes2['default'].string,
    tabBarExtraContent: _propTypes2['default'].any,
    onTabEvent: _propTypes2['default'].func,
    onKeyDown: _propTypes2['default'].func,
    panels: _propTypes2['default'].oneOfType([_propTypes2['default'].array, _propTypes2['default'].object]),
    activeKey: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number]),
    prefix: _propTypes2['default'].string,
    children: _propTypes2['default'].any,
    style: _propTypes2['default'].object,
    contentHeight: _propTypes2['default'].number
}, _temp);
Nav.displayName = 'Nav';
exports['default'] = Nav;
module.exports = exports['default'];