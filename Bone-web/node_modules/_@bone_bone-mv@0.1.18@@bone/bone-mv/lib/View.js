"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _react = require("react");

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var $model = (0, _symbol2.default)("model");
var $actions = (0, _symbol2.default)("actions");
var $parentView = (0, _symbol2.default)("parentView");
var Undefined = void 0;

/**
 * 使react-redux的使用方式与标准react保持一致
 * 1、使用state获取store中的状态
 * 2、componentWillReceiveProps只有在ownProps改变时才触发
 * 唯一的不同:
 * 使用this.actions.xxx代替this.setState去更新数据
 */

var View = function (_Component) {
    (0, _inherits3.default)(View, _Component);

    function View() {
        var _ref;

        var _temp, _this, _ret;

        (0, _classCallCheck3.default)(this, View);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = View.__proto__ || (0, _getPrototypeOf2.default)(View)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
            context: _this.context

            // @todo
            // 容易被覆盖
        }, _this[$model] = Undefined, _this[$actions] = Undefined, _this.$parentView = Undefined, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
    }

    (0, _createClass3.default)(View, [{
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps, nextContext) {
            this.setState({
                context: nextContext
            });
        }
    }, {
        key: "getChildContext",
        value: function getChildContext() {
            return {
                parentView: this
            };
        }
    }, {
        key: "getState",


        // 获取数据的快速方法
        value: function getState() {
            return (this.state.context || this.context).getState();
        }
    }, {
        key: "model",

        // 提供model快速找到数据模型
        // 数据模型可能为单例、数组或者哈希结构
        get: function get() {
            if (this[$model] !== Undefined) {
                return this[$model];
            }

            return (this.state.context || this.context).model;
        },
        set: function set(model) {
            this[$model] = model;
        }
    }, {
        key: "actions",

        // 使用actions.xxx修改数据
        get: function get() {
            if (this[$actions] !== Undefined) {
                return this[$actions];
            }

            return (this.state.context || this.context).dispatches;
        },
        set: function set(actions) {
            this[$actions] = actions;
        }
    }, {
        key: "parentView",

        // 提供parentView快速找到控制器
        get: function get() {
            if (this[$parentView] !== Undefined) {
                return this[$parentView];
            }

            // 向上查找，找不到时，即为parentView
            return (this.state.context || this.context).parentView || this;
        },
        set: function set(parentView) {
            this[$parentView] = parentView;
        }
    }]);
    return View;
}(_react.Component);

View.contextTypes = {
    dispatches: _propTypes2.default.object,
    getState: _propTypes2.default.func,
    parentView: _propTypes2.default.object,
    model: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.arrayOf(_propTypes2.default.object)])
};
View.childContextTypes = {
    parentView: _propTypes2.default.object
};
exports.default = View;