"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CONTEXT = exports.IS_FIRST_CONNECT = exports.STATE_CACHE = exports.INIT_DISPATCHS = exports.INIT_REDUCER = exports.REDUCER = exports.STORE_PROXY = exports.VIEW_COUNT = exports.UNCONNECT = exports.CONNECT = undefined;

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defineProperty2 = require("babel-runtime/helpers/defineProperty");

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _typeof2 = require("babel-runtime/helpers/typeof");

var _typeof3 = _interopRequireDefault(_typeof2);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _constants = require("./constants");

var _uniqueId = require("./utils/unique-id");

var _uniqueId2 = _interopRequireDefault(_uniqueId);

var _functionType = require("./utils/function-type");

var _getActions = require("./utils/get-actions");

var _getActions2 = _interopRequireDefault(_getActions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getActions = (0, _getActions2.default)(Model);

var NOOP = function NOOP() {};
var NULL = {};
var EmptyGetState = function EmptyGetState() {
    // @todo logger
    console.warn("\u5F53\u524Dmodel\u8FD8\u672A\u4E0Estore\u8FDE\u63A5");
};
var EmptyDispatch = function EmptyDispatch() {
    // @todo logger
    console.warn("\u5F53\u524Dmodel\u8FD8\u672A\u4E0Estore\u8FDE\u63A5");
};

var CONNECT = exports.CONNECT = (0, _symbol2.default)("connect");
var UNCONNECT = exports.UNCONNECT = (0, _symbol2.default)("unconnect");
var VIEW_COUNT = exports.VIEW_COUNT = (0, _symbol2.default)("view-count");
var STORE_PROXY = exports.STORE_PROXY = (0, _symbol2.default)("store-proxy");
var REDUCER = exports.REDUCER = (0, _symbol2.default)("reducer");
var INIT_REDUCER = exports.INIT_REDUCER = (0, _symbol2.default)("init-reducer");
var INIT_DISPATCHS = exports.INIT_DISPATCHS = (0, _symbol2.default)("init-dispatchs");
var STATE_CACHE = exports.STATE_CACHE = (0, _symbol2.default)("state-cache");
var IS_FIRST_CONNECT = exports.IS_FIRST_CONNECT = (0, _symbol2.default)("is-first-connect");
var CONTEXT = exports.CONTEXT = (0, _symbol2.default)("context");

// action计数，用来生成action的id
var actionCount = 0;
var Undefined = void 0;

/**
 * 目前缺少的功能：
 * isSingleton、initState这两个静态属性写成实例属性的检测提醒
 */

var Model = function () {
    // 初始state

    // 是否是单例
    // 对于单例Model，多次实例化都返回同一个实例
    // 共享模型时用
    function Model() {
        (0, _classCallCheck3.default)(this, Model);
        this[_constants.MODEL_STORE_KEY] = "";
        this[STATE_CACHE] = Undefined;
        this[CONTEXT] = null;
        this.dispatches = NULL;
        this[VIEW_COUNT] = 0;
        this[_constants.MODEL_CONNECTED] = false;
        this[IS_FIRST_CONNECT] = true;
        this[UNCONNECT] = NOOP;

        var ModelClass = this.constructor;
        // 判断单例模型
        if (ModelClass[_constants.MODEL_SINGLETON_INSTANCE]) {
            return ModelClass[_constants.MODEL_SINGLETON_INSTANCE];
        } else if (ModelClass.isSingleton) {
            ModelClass[_constants.MODEL_SINGLETON_INSTANCE] = this;
        }

        // 生成store上的存储key
        var modelClassName = this.constructor.displayName || this.constructor.name || "model";
        this[_constants.MODEL_STORE_KEY] = "" + modelClassName + (0, _uniqueId2.default)(modelClassName);

        this[STORE_PROXY] = {
            getState: EmptyGetState,
            dispatch: EmptyDispatch
        };

        this[INIT_REDUCER](this[_constants.MODEL_STORE_KEY]);
        this[INIT_DISPATCHS](this[STORE_PROXY], this[_constants.MODEL_STORE_KEY]);

        this.onInit.call(this[CONTEXT]);
    }
    // 当前model对应的state缓存
    // 断开连接的时候，将状态缓存到model中，用来下次连接的时候恢复


    // 在state中使用的key

    // 单例实例


    (0, _createClass3.default)(Model, [{
        key: INIT_REDUCER,

        // 初始model的reducer
        value: function value(storeKey) {
            var _this = this;

            this[REDUCER] = (0, _defineProperty3.default)({}, storeKey, function (state, action) {
                var _action$type$split = action.type.split("."),
                    _action$type$split2 = (0, _slicedToArray3.default)(_action$type$split, 2),
                    actionStoreKey = _action$type$split2[0],
                    actionName = _action$type$split2[1];

                // quick exit


                if (actionStoreKey !== storeKey) {
                    return state;
                }

                // 只有当前model的success action才会更新state
                if (_constants.ACTION_START_VALIDATE.test(actionName)) {
                    action.payload.info.next(action.payload.info.args);
                } else if (_constants.ACTION_SUCCESS_VALIDATE.test(actionName)) {
                    if ((0, _typeof3.default)(action.payload.changeState) === "object") {
                        return (0, _extends3.default)({}, state, action.payload.changeState);
                    }
                } else if (actionName === _constants.ACTION_CONNECT + '') {
                    // connect或reconnect时，使用initialState或state cache作为初始值
                    // ACTION_CONNECT is imported, and it's object by default
                    return [state, _this[STATE_CACHE], _this.constructor.initialState].find(function (item) {
                        return typeof item !== "undefined";
                    });
                }

                return state;
            });
        }
    }, {
        key: INIT_DISPATCHS,

        // 初始化model的dispatchs
        value: function value(storeProxy, storeKey) {
            var _payloadKeyHash,
                _this2 = this;

            // 生成给view调用的actions
            var dispatches = this.dispatches = {};
            // action执行上下文
            var actionContext = {};
            // 不同类型的action主题内容对应的字段
            var payloadKeyHash = (_payloadKeyHash = {}, (0, _defineProperty3.default)(_payloadKeyHash, _constants.ACTION_START_SUFFIX, "info"), (0, _defineProperty3.default)(_payloadKeyHash, _constants.ACTION_SUCCESS_SUFFIX, "changeState"), (0, _defineProperty3.default)(_payloadKeyHash, _constants.ACTION_FAIL_SUFFIX, "error"), _payloadKeyHash);
            // 产生简单的dispatch调用方法
            var dispatchFactory = function dispatchFactory(actionName) {
                var actionId = actionCount++;

                return function (status, payload) {
                    storeProxy.dispatch({
                        type: storeKey + "." + actionName + status,
                        payload: (0, _defineProperty3.default)({
                            id: actionId
                        }, payloadKeyHash[status], payload)
                    });
                };
            };

            getActions(this).forEach(function (actionName) {
                var action = _this2[actionName];

                dispatches[actionName] = function () {
                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    var $dispatch = dispatchFactory(actionName);
                    try {
                        var isContinue = false;

                        $dispatch(_constants.ACTION_START_SUFFIX, {
                            args: args,
                            next: function next(nextArgs) {
                                args = nextArgs;
                                isContinue = true;
                            }
                        });

                        if (!isContinue) {
                            _this2.onWarn.call(actionContext, {
                                action: actionName,
                                args: args,
                                info: "action '" + actionName + "' \u6267\u884C\u88AB\u963B\u6B62"
                            });
                            return;
                        }

                        var changeState = action.apply(actionContext, args);

                        // if(changeState instanceof Promise){
                        if ("[object Promise]" === Object.prototype.toString.call(changeState)
                        // 对特殊情况做特性判断，需要再想想有没有更好的方式
                        || (typeof changeState === "undefined" ? "undefined" : (0, _typeof3.default)(changeState)) === "object" && typeof changeState.then === "function") {
                            // 异步action
                            return (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                                return _regenerator2.default.wrap(function _callee$(_context) {
                                    while (1) {
                                        switch (_context.prev = _context.next) {
                                            case 0:
                                                _context.prev = 0;
                                                _context.next = 3;
                                                return changeState;

                                            case 3:
                                                changeState = _context.sent;

                                                // 如果在异步请求发送之后，数据返回之前断开了与store的连接
                                                // 则数据返回后不发送action
                                                _this2[_constants.MODEL_CONNECTED] && $dispatch(_constants.ACTION_SUCCESS_SUFFIX, changeState);
                                                return _context.abrupt("return", changeState);

                                            case 8:
                                                _context.prev = 8;
                                                _context.t0 = _context["catch"](0);

                                                _this2[_constants.MODEL_CONNECTED] && $dispatch(_constants.ACTION_FAIL_SUFFIX, _context.t0);

                                                _this2.onError.call(actionContext, {
                                                    action: actionName,
                                                    args: args,
                                                    error: _context.t0
                                                });

                                                throw _context.t0;

                                            case 13:
                                            case "end":
                                                return _context.stop();
                                        }
                                    }
                                }, _callee, _this2, [[0, 8]]);
                            }))();
                        }

                        $dispatch(_constants.ACTION_SUCCESS_SUFFIX, changeState);

                        return changeState;
                    } catch (e) {
                        $dispatch(_constants.ACTION_FAIL_SUFFIX, e);

                        _this2.onError.call(actionContext, {
                            action: actionName,
                            args: args,
                            error: e
                        });

                        throw e;
                    }
                };
            });

            actionContext = (0, _extends3.default)({}, dispatches);

            Object.defineProperty(actionContext, "state", {
                get: function get() {
                    return storeProxy.getState();
                }
            });

            this[CONTEXT] = actionContext;
        }

        // model实例连接的view列表

    }, {
        key: _constants.MODEL_CONNECT_VIEW,

        // 连接一个view到模型
        value: function value(store) {
            var _this3 = this;

            if (!this[_constants.MODEL_CONNECTED]) {
                this[CONNECT](store);
            }

            this[VIEW_COUNT]++;

            // 保证unconnect只被调用一次
            var isViewConnect = true;
            // 移除一个连接到模型的view
            return function () {
                if (isViewConnect) {
                    isViewConnect = false;
                    // 当模型上没有绑定任何view的时候，将模型与store断开连接
                    if (--_this3[VIEW_COUNT] === 0) {
                        // 断开与store的连接
                        _this3[UNCONNECT]();
                    }
                }
            };
        }

        // 是否与store已连接

        // 是否第一次连接

    }, {
        key: CONNECT,

        // 与store建立连接
        value: function value(store) {
            var _this4 = this;

            var storeKey = this[_constants.MODEL_STORE_KEY];

            // 与store进行连接
            var unconnect = store.$reducer.add(this[REDUCER]);
            this[STORE_PROXY].getState = function (storeKey) {
                return function () {
                    return store.getState()[storeKey];
                };
            }(storeKey);
            this[STORE_PROXY].dispatch = store.dispatch;
            this[_constants.MODEL_CONNECTED] = true;

            store.dispatch({
                type: storeKey + "." + _constants.ACTION_CONNECT
            });

            this.onConnect.call(this[CONTEXT], {
                isFirst: this[IS_FIRST_CONNECT]
            });

            this[UNCONNECT] = function () {
                _this4[STORE_PROXY].getState = EmptyGetState;
                _this4[STORE_PROXY].dispatch = EmptyDispatch;
                _this4[_constants.MODEL_CONNECTED] = false;
                _this4[UNCONNECT] = NOOP;

                _this4[STATE_CACHE] = store.getState()[_this4[_constants.MODEL_STORE_KEY]];

                unconnect();

                // reducer will clean up data when unconnected
                store.dispatch({
                    type: storeKey + "." + _constants.ACTION_UNCONNECT
                });

                _this4.onUnconnect.call(_this4[CONTEXT], {
                    isFirst: _this4[IS_FIRST_CONNECT]
                });
                _this4[IS_FIRST_CONNECT] = false;
            };
        }
        // 与store断开连接

    }, {
        key: "onInit",

        /**
         * 实例化后触发
         */
        value: function onInit() {}
        /**
         * 与store连接时触发
         * @param {*} e 
         * e:
         * {
         *      // 是否首次连接
         *      isFirst: true
         * }
         */

    }, {
        key: "onConnect",
        value: function onConnect(e) {}
        /**
         * 与store断开时触发
         * @param {*} e 
         */

    }, {
        key: "onUnconnect",
        value: function onUnconnect(e) {}
        /**
         * action执行过程中的异常信息
         * @param {*} e 
         */

    }, {
        key: "onWarn",
        value: function onWarn(info) {
            // @todo logger
            console.warn(info.info);
        }
        /**
         * action执行出错时触发
         * @param {*} e 
         */

    }, {
        key: "onError",
        value: function onError(e) {
            // @todo logger
            console.error(e.error);
        }
    }, {
        key: "state",


        // delegation to model[STORE_PROXY].getState
        get: function get() {
            return this[STORE_PROXY] ? this[STORE_PROXY].getState() : NULL;
        }

        // 

    }]);
    return Model;
}();

Model.isSingleton = false;
Model[_constants.MODEL_SINGLETON_INSTANCE] = null;
Model.initialState = {};
exports.default = Model;