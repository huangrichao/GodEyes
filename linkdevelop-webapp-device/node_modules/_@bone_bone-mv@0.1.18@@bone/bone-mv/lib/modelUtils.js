"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.connect = exports.instantiation = undefined;

var _toConsumableArray2 = require("babel-runtime/helpers/toConsumableArray");

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _symbol = require("babel-runtime/core-js/symbol");

var _symbol2 = _interopRequireDefault(_symbol);

var _Model = require("./Model");

var _Model2 = _interopRequireDefault(_Model);

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var modelType = {
    one: (0, _symbol2.default)("one"),
    array: (0, _symbol2.default)("array"),
    hash: (0, _symbol2.default)("hash")
};

// 实例化Model
var instantiation = exports.instantiation = function instantiation(Model) {
    if (_Model2.default.isPrototypeOf(Model) || Model.prototype instanceof _Model2.default) {
        // 单model场景
        return {
            type: modelType.one,
            value: new Model()
        };
    } else if (Model instanceof Array) {
        // 多model相互merge场景
        return {
            type: modelType.array,
            value: Model.map(function (Model) {
                return new Model();
            })
        };
    } else {
        var model = {};

        for (var modelName in Model) {
            model[modelName] = new Model[modelName]();
        }

        return {
            type: modelType.hash,
            value: model
        };
    }
};

// 将model连接到store
// 并返回可操作的一些功能
var connect = exports.connect = function connect(store, model) {
    var $dispatches = void 0;
    var $unconnect = void 0;
    var $mapStateToProps = void 0;
    var $getState = void 0;

    switch (model.type) {
        case modelType.one:
            {
                model = model.value;

                var storeKey = model[_constants.MODEL_STORE_KEY];

                $unconnect = model[_constants.MODEL_CONNECT_VIEW](store);
                $dispatches = model.dispatches;

                $mapStateToProps = function $mapStateToProps(state, ownProps) {
                    return (0, _extends3.default)({}, state[storeKey]);
                };

                $getState = function $getState() {
                    return model.state;
                };
            }
            break;
        case modelType.array:
            {
                model = model.value;

                var unconnects = [];
                var storeKeys = [];
                var dispatches = [];

                model.forEach(function (model, index) {
                    var unconnect = model[_constants.MODEL_CONNECT_VIEW](store);
                    dispatches.push(model.dispatches);
                    unconnects.push(unconnect);
                    storeKeys.push(model[_constants.MODEL_STORE_KEY]);
                });

                $dispatches = _assign2.default.apply(Object, [{}].concat(dispatches));

                $unconnect = function $unconnect() {
                    return unconnects.forEach(function (unconnect) {
                        return unconnect();
                    });
                };

                $mapStateToProps = function $mapStateToProps(state, ownProps) {
                    return _assign2.default.apply(Object, [{}].concat((0, _toConsumableArray3.default)(storeKeys.map(function (storeKey) {
                        return state[storeKey];
                    }))));
                };

                $getState = function $getState() {
                    return _assign2.default.apply(Object, [{}].concat((0, _toConsumableArray3.default)(model.map(function (model) {
                        return model.state;
                    }))));
                };
            }
            break;
        case modelType.hash:
            {
                model = model.value;

                $dispatches = {};
                var _unconnects = [];
                var _storeKeys = {};

                for (var modelName in model) {
                    var unconnect = model[modelName][_constants.MODEL_CONNECT_VIEW](store);

                    $dispatches[modelName] = model[modelName].dispatches;
                    _unconnects.push(unconnect);
                    _storeKeys[modelName] = model[modelName][_constants.MODEL_STORE_KEY];
                }

                $unconnect = function $unconnect() {
                    return _unconnects.forEach(function (unconnect) {
                        return unconnect();
                    });
                };

                $mapStateToProps = function $mapStateToProps(state, ownProps) {
                    var useState = {};
                    for (var _modelName in _storeKeys) {
                        useState[_modelName] = state[_storeKeys[_modelName]];
                    }

                    return useState;
                };

                $getState = function $getState() {
                    var state = {};

                    for (var _modelName2 in _storeKeys) {
                        state[_modelName2] = model[_modelName2].state;
                    }

                    return state;
                };
            }
            break;
    }

    return {
        dispatches: $dispatches,
        unconnect: $unconnect,
        mapStateToProps: $mapStateToProps,
        getState: $getState
    };
};