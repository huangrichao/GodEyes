import loadStatic from "./load-static";
import appkeyForm from "./appkey-form";
var appkeyReady = null;

// 检查是否没有服务调用权限
const check403 = async (error, callback) => {
    const status = error.response.status;
    const data = await error.response.json();
    const { $type, message } = data;
    const bool = status === 403 && $type === 'bone-web-mock';

    if (bool) {
        return new Promise((resolve, reject) => {
            if (!appkeyReady) {
                appkeyReady = new Promise((resolve, reject) => {
                    loadStatic(() => appkeyForm({
                        message,
                        resolve: () => {
                            appkeyReady = null;
                            resolve();
                        },
                        reject: (e) => {
                            appkeyReady = null;
                            reject(e);
                        }
                    }));
                })
            }

            appkeyReady.then(() => {
                resolve(callback());
            }).catch(e => {
                if (e) {
                    reject(e);
                } else {
                    reject(error);
                }
            })
        });
    }

    throw error;
}

export default {

    /**
     *
     * Get
     * @param {Object} config { url, apiVer, ioTToken, params }
     * @returns {*}
     *
     */
    get() {
        throw new Error('Only accept post method for now.');
    },

    /**
     *
     * Post
     * @param {Object} config { url, apiVer, ioTToken, params }
     * @returns {*}
     *
     */
    post(config) {
        const error = this.validate(config);

        if (error) {
            return Promise.reject(error);
        }

        const {url, apiVer, ioTToken, params = {}, apigw, headers = {}} = config;

        return fetch(apigw || '/apigw.iot', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                ...headers
            },
            credentials: 'same-origin',
            body: JSON.stringify({
                url: this.autoPlatformService(url),
                apiVer,
                ioTToken,
                params
            })
        }).then(response => {
            if (response.status >= 200 && response.status < 300) {
                return response;
            }else{
                let error = new Error(response.statusText);
                error.response = response;
                throw error;
            }
        }).then(response => {
            return response.json();
        }).catch(error => {
            return check403(error, () => {
                return this.post(config);
            })
        });
    },

    /**
     *
     * OXS or VPC service doamin
     * @param {String} url
     * @returns {*}
     */
    autoPlatformService(url) {
        let isOfficial = false;

        const name = window['app_official_service_name'],
            list = ['api.link.aliyun.com', 'official.api.feifengiot.com'];

        list.forEach(n => {
            if (url && url.indexOf(n) !== -1) {
                isOfficial = true;
            }
        });

        if (!(name  && isOfficial)) {
            return url;
        }

        if (url.indexOf(name) === -1) {
            return url.replace(/\/\/([^\/]+)\//i, `\/\/${name}\/`);
        }

        return url;
    },

    /**
     *
     * Validate
     * @param {Object} config
     * @returns {*}
     *
     */
    validate(config) {
        let res,
            keys = ['url', 'apiVer'];

        if (config) {
            keys.forEach(n => {
                let val = config[n];

                if (!val) {
                    res = `Bone request parameter "${n}" is required！`;
                } else if (typeof val !== 'string') {
                    res = `Bone request parameter "${n}" type is not a string！`;
                }
            });

        } else {
            res = 'Bone request parameter is required！';
        }

        return res;
    }

}