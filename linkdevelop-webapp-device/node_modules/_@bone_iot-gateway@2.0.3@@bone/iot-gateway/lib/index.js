"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _loadStatic = require("./load-static");

var _loadStatic2 = _interopRequireDefault(_loadStatic);

var _appkeyForm = require("./appkey-form");

var _appkeyForm2 = _interopRequireDefault(_appkeyForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var appkeyReady = null;

// 检查是否没有服务调用权限
var check403 = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(error, callback) {
        var status, data, $type, message, bool;
        return _regenerator2.default.wrap(function _callee$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        status = error.response.status;
                        _context.next = 3;
                        return error.response.json();

                    case 3:
                        data = _context.sent;
                        $type = data.$type, message = data.message;
                        bool = status === 403 && $type === 'bone-web-mock';

                        if (!bool) {
                            _context.next = 8;
                            break;
                        }

                        return _context.abrupt("return", new _promise2.default(function (resolve, reject) {
                            if (!appkeyReady) {
                                appkeyReady = new _promise2.default(function (_resolve, _reject) {
                                    (0, _loadStatic2.default)(function () {
                                        return (0, _appkeyForm2.default)({
                                            message: message,
                                            resolve: function resolve() {
                                                appkeyReady = null;
                                                _resolve();
                                            },
                                            reject: function reject(e) {
                                                appkeyReady = null;
                                                _reject(e);
                                            }
                                        });
                                    });
                                });
                            }

                            appkeyReady.then(function () {
                                resolve(callback());
                            }).catch(function (e) {
                                if (e) {
                                    reject(e);
                                } else {
                                    reject(error);
                                }
                            });
                        }));

                    case 8:
                        throw error;

                    case 9:
                    case "end":
                        return _context.stop();
                }
            }
        }, _callee, undefined);
    }));

    return function check403(_x, _x2) {
        return _ref.apply(this, arguments);
    };
}();

exports.default = {

    /**
     *
     * Get
     * @param {Object} config { url, apiVer, ioTToken, params }
     * @returns {*}
     *
     */
    get: function get() {
        throw new Error('Only accept post method for now.');
    },


    /**
     *
     * Post
     * @param {Object} config { url, apiVer, ioTToken, params }
     * @returns {*}
     *
     */
    post: function post(config) {
        var _this = this;

        var error = this.validate(config);

        if (error) {
            return _promise2.default.reject(error);
        }

        var url = config.url,
            apiVer = config.apiVer,
            ioTToken = config.ioTToken,
            _config$params = config.params,
            params = _config$params === undefined ? {} : _config$params,
            apigw = config.apigw,
            _config$headers = config.headers,
            headers = _config$headers === undefined ? {} : _config$headers;


        return fetch(apigw || '/apigw.iot', {
            method: 'POST',
            headers: (0, _extends3.default)({
                'Content-Type': 'application/json'
            }, headers),
            credentials: 'same-origin',
            body: (0, _stringify2.default)({
                url: this.autoPlatformService(url),
                apiVer: apiVer,
                ioTToken: ioTToken,
                params: params
            })
        }).then(function (response) {
            if (response.status >= 200 && response.status < 300) {
                return response;
            } else {
                var _error = new Error(response.statusText);
                _error.response = response;
                throw _error;
            }
        }).then(function (response) {
            return response.json();
        }).catch(function (error) {
            return check403(error, function () {
                return _this.post(config);
            });
        });
    },


    /**
     *
     * OXS or VPC service doamin
     * @param {String} url
     * @returns {*}
     */
    autoPlatformService: function autoPlatformService(url) {
        var isOfficial = false;

        var name = window['app_official_service_name'],
            list = ['api.link.aliyun.com', 'official.api.feifengiot.com'];

        list.forEach(function (n) {
            if (url && url.indexOf(n) !== -1) {
                isOfficial = true;
            }
        });

        if (!(name && isOfficial)) {
            return url;
        }

        if (url.indexOf(name) === -1) {
            return url.replace(/\/\/([^\/]+)\//i, "//" + name + "/");
        }

        return url;
    },


    /**
     *
     * Validate
     * @param {Object} config
     * @returns {*}
     *
     */
    validate: function validate(config) {
        var res = void 0,
            keys = ['url', 'apiVer'];

        if (config) {
            keys.forEach(function (n) {
                var val = config[n];

                if (!val) {
                    res = "Bone request parameter \"" + n + "\" is required\uFF01";
                } else if (typeof val !== 'string') {
                    res = "Bone request parameter \"" + n + "\" type is not a string\uFF01";
                }
            });
        } else {
            res = 'Bone request parameter is required！';
        }

        return res;
    }
};