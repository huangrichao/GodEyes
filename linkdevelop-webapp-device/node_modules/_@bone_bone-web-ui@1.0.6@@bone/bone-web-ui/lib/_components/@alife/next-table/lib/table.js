'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nextCheckbox = require('../../next-checkbox/lib/index.js');

var _nextCheckbox2 = _interopRequireDefault(_nextCheckbox);

var _nextRadio = require('../../next-radio/lib/index.js');

var _nextRadio2 = _interopRequireDefault(_nextRadio);

var _classnames6 = require('classnames');

var _classnames7 = _interopRequireDefault(_classnames6);

var _nextIcon = require('../../next-icon/lib/index.js');

var _nextIcon2 = _interopRequireDefault(_nextIcon);

var _nextUtil = require('../../next-util/lib/index.js');

var _nextDom = require('../../next-dom/lib/index.js');

var _nextLocaleProvider = require('../../next-locale-provider/lib/index.js');

var _nextLocaleProvider2 = _interopRequireDefault(_nextLocaleProvider);

var _filter = require('./filter.js');

var _filter2 = _interopRequireDefault(_filter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defaults(obj, defaults) { var keys = Object.getOwnPropertyNames(defaults); for (var i = 0; i < keys.length; i++) { var key = keys[i]; var value = Object.getOwnPropertyDescriptor(defaults, key); if (value && value.configurable && obj[key] === undefined) { Object.defineProperty(obj, key, value); } } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass); }

var Children = _react2['default'].Children,
    noop = function noop() {},
    findDOMNode = _reactDom2['default'].findDOMNode,
    getScrollbarSize = _nextUtil.scrollbar,
    makeChain = _nextUtil.func.makeChain;

//<Table>
//    <Table.Column/>
//    <Table.ColumnGroup>
//      <Table.Column/>
//      <Table.Column/>
//    </Table.ColumnGroup>
//</Table>

/** Table */
var Table = (_temp = _class = function (_React$Component) {
    _inherits(Table, _React$Component);

    function Table(props, context) {
        _classCallCheck(this, Table);

        var _this = _possibleConstructorReturn(this, _React$Component.call(this, props, context));

        _this.state = _extends({}, _this.normalizeChildrenState(props), {
            dataSource: _this.analyseDataSource(props.dataSource, props),
            selectedRowKeys: props.rowSelection && 'selectedRowKeys' in props.rowSelection ? props.rowSelection.selectedRowKeys || [] : [],
            sort: props.sort || {},
            expandedRowKeys: props.expandedRowKeys || [],
            openRowKeys: props.openRowKeys || []
        });

        _this.notRenderCellIndex = false;
        return _this;
    }

    Table.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var state = this.normalizeChildrenState(nextProps);

        if ('dataSource' in nextProps) {
            state.dataSource = this.analyseDataSource(nextProps.dataSource, nextProps);
        }
        if ('sort' in nextProps) {
            state.sort = nextProps.sort || {};
        }
        if (nextProps.rowSelection && 'selectedRowKeys' in nextProps.rowSelection) {
            state.selectedRowKeys = nextProps.rowSelection.selectedRowKeys || [];
        }
        if ('expandedRowKeys' in nextProps) {
            state.expandedRowKeys = nextProps.expandedRowKeys;
        }
        if ('openRowKeys' in nextProps) {
            state.openRowKeys = nextProps.openRowKeys;
        }

        this.setState(state);
    };

    Table.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {
        if (nextProps.optimization) {
            if (shallowEqual(this.props, nextProps) && shallowEqual(this.state, nextState)) {
                return false;
            }
            return true;
        } else {
            return true;
        }
    };

    Table.prototype.componentWillUpdate = function componentWillUpdate() {
        this.notRenderCellIndex = false;
        // 标记是否在lock中有合并单元格的情况，如果在lock中有合并单元格的情况采用更复杂的高度同步计算方式
        this.rowSpanLock = false;
    };

    Table.prototype.normalizeChildrenState = function normalizeChildrenState(props) {
        var normalizeChildren = this.normalizeChildren(props.children);

        if (props.expandedRowRender && props.hasExpandedRowCtrl) {
            normalizeChildren.unshift(this.renderExpandedNode());
        }
        if (props.rowSelection) {
            normalizeChildren.unshift(this.renderSelectionNode());
        }

        var splitChildren = this.splitFromNormalizeChildren(normalizeChildren),
            lockLeftChildren = splitChildren.lockLeftChildren,
            lockRightChildren = splitChildren.lockRightChildren,
            children = this.mergeFromSplitLockChildren(splitChildren),
            state = this.fetchInfoFromBinaryChildren(children),
            lockLeftChildrenMeta = this.fetchInfoFromBinaryChildren(lockLeftChildren),
            lockRightChildrenMeta = this.fetchInfoFromBinaryChildren(lockRightChildren);


        state.lockLeftGroupChildren = lockLeftChildrenMeta.groupChildren;
        state.lockLeftChildren = lockLeftChildrenMeta.flatChildren;
        state.lockRightGroupChildren = lockRightChildrenMeta.groupChildren;
        state.lockRightChildren = lockRightChildrenMeta.flatChildren;

        return state;
    };

    // 将React结构化数据提取props转换成数组


    Table.prototype.normalizeChildren = function normalizeChildren(children) {
        var isLock = false,
            getChildren = function getChildren(children) {
            var result = [];
            Children.forEach(children, function (child) {
                if (child) {
                    var props = _extends({}, child.props),
                        type = child.type,
                        mark = type._tableMark;

                    if (['column', 'column-group', 'list-group-header'].indexOf(mark) === -1) {
                        _nextUtil.log.warning('Use <Table.Column/>,<Table.ColumnGroup/>,<Table.GroupHeader/> as child.');
                    }
                    props.__mark = mark;
                    if ([true, 'left', 'right'].indexOf(props.lock) > -1) {
                        isLock = true;
                        if (!('width' in props)) {
                            _nextUtil.log.warning('Should config width for lock column named [ ' + props.dataIndex + ' ].');
                        }
                    }
                    result.push(props);
                    if (child.props.children) {
                        props.children = getChildren(child.props.children);
                    }
                }
            });
            return result;
        };
        var result = getChildren(children);
        this._isLock = isLock;
        return result;
    };

    Table.prototype.getPrefix = function getPrefix() {
        return this.context.prefix || this.props.prefix;
    };

    //从数组中分离出lock的列和正常的列


    Table.prototype.splitFromNormalizeChildren = function splitFromNormalizeChildren(children) {
        var originChildren = deepCopy(children),
            lockLeftChildren = deepCopy(children),
            lockRightChildren = deepCopy(children),
            loop = function loop(lockChildren, condition) {
            var result = [];
            lockChildren.forEach(function (child) {
                if (child.children) {
                    var res = loop(child.children, condition);
                    if (!res.length) {
                        result.push(child);
                    }
                } else {
                    var order = condition(child);
                    if (!order) {
                        result.push(child);
                    }
                }
            });
            result.forEach(function (res) {
                var index = lockChildren.indexOf(res);
                lockChildren.splice(index, 1);
            });
            return lockChildren;
        };

        loop(lockLeftChildren, function (child) {
            if (child.lock === true || child.lock === 'left') {
                return 'left';
            }
        });

        loop(lockRightChildren, function (child) {
            if (child.lock === 'right') {
                return 'right';
            }
        });

        loop(originChildren, function (child) {
            return child.lock !== true && child.lock !== 'left' && child.lock !== 'right';
        });

        return {
            lockLeftChildren: lockLeftChildren,
            lockRightChildren: lockRightChildren,
            originChildren: originChildren
        };
    };

    //将左侧的锁列树和中间的普通树及右侧的锁列树进行合并


    Table.prototype.mergeFromSplitLockChildren = function mergeFromSplitLockChildren(splitChildren) {
        var lockLeftChildren = splitChildren.lockLeftChildren,
            lockRightChildren = splitChildren.lockRightChildren,
            originChildren = splitChildren.originChildren;


        Array.prototype.unshift.apply(originChildren, lockLeftChildren);
        originChildren = originChildren.concat(lockRightChildren);

        return originChildren;
    };

    // 将结构化的数据转换成适合render的数据


    Table.prototype.fetchInfoFromBinaryChildren = function fetchInfoFromBinaryChildren(children) {
        var flatChildren = [],
            groupChildren = [],
            hasListGroupHeader = void 0,
            listGroupHeader = void 0,
            hasGroupHeader = void 0,
            getChildren = function getChildren(propsChildren, level) {
            groupChildren[level] = groupChildren[level] || [];
            propsChildren.forEach(function (child) {
                var mark = child.__mark;
                if (mark === 'list-group-header') {
                    hasListGroupHeader = true;
                    listGroupHeader = child;
                } else {
                    if (mark === 'column-group') {
                        hasGroupHeader = true;
                        getChildren(child.children, level + 1);
                    } else if (mark === 'column') {
                        flatChildren.push(child);
                    }
                    groupChildren[level].push(child);
                }
            });
        },
            getColSpan = function getColSpan(children, colSpan) {
            colSpan = colSpan || 0;
            children.forEach(function (child) {
                if (child.children) {
                    colSpan = getColSpan(child.children, colSpan);
                } else {
                    colSpan += 1;
                }
            });
            return colSpan;
        };

        getChildren(children, 0);

        groupChildren.forEach(function (groupChild, i) {
            groupChild.forEach(function (child, j) {
                var children = child.children,
                    colSpan = void 0;

                if (children) {
                    colSpan = getColSpan(children);
                    child.colSpan = colSpan;
                    groupChildren[i][j] = child;
                }
            });
        });

        return {
            flatChildren: flatChildren,
            groupChildren: groupChildren,
            hasListGroupHeader: hasListGroupHeader,
            listGroupHeader: listGroupHeader,
            hasGroupHeader: hasGroupHeader
        };
    };

    // 渲染checkbox,直接使用序列化后的数据格式


    Table.prototype.renderSelectionNode = function renderSelectionNode() {
        var column = {
            cell: this.renderSelectionCell('body'),
            title: this.renderSelectionCell('header'),
            width: 50,
            className: this.getPrefix() + 'table-selection',
            __mark: 'column',
            __type: 'selection'
        };
        if (this.isOriginLock()) {
            column.lock = true;
        }
        return column;
    };

    Table.prototype.renderSelectionCell = function renderSelectionCell(type) {
        var _this2 = this;

        return function (value, index, record) {
            var checked = void 0,
                onChange = void 0,
                attrs = {},
                _props = _this2.props,
                rowSelection = _props.rowSelection,
                primaryKey = _props.primaryKey,
                _state = _this2.state,
                selectedRowKeys = _state.selectedRowKeys,
                dataSource = _state.dataSource,
                hasListGroupHeader = _state.hasListGroupHeader,
                mode = rowSelection.mode ? rowSelection.mode : 'multiple';

            if (hasListGroupHeader) {
                dataSource = _this2.flatDataSource(dataSource);
            }

            if (type === 'header') {
                checked = !!selectedRowKeys.length;
                dataSource.filter(function (record, index) {
                    if (!rowSelection.getProps) {
                        return true;
                    } else {
                        return !(rowSelection.getProps(record, index) || {}).disabled;
                    }
                }).map(function (record) {
                    return record[primaryKey];
                }).forEach(function (id) {
                    if (selectedRowKeys.indexOf(id) === -1) {
                        checked = false;
                    }
                });
                onChange = _this2.selectAllRow.bind(_this2);
                if (mode !== 'multiple') {
                    return null;
                }
            } else {
                checked = _this2.state.selectedRowKeys.indexOf(record[_this2.props.primaryKey]) > -1;
                onChange = _this2.selectOneRow.bind(_this2, index, record);
                attrs = rowSelection.getProps ? rowSelection.getProps(record, index) || {} : {};
            }
            attrs.onClick = makeChain(function (e) {
                e.stopPropagation();
            }, attrs.onClick);
            return mode === 'multiple' ? _react2['default'].createElement(_nextCheckbox2['default'], _extends({ checked: checked, onChange: onChange }, attrs)) : _react2['default'].createElement(_nextRadio2['default'], _extends({ checked: checked, onChange: onChange }, attrs));
        };
    };

    //渲染额外的控制数据的项


    Table.prototype.renderExpandedNode = function renderExpandedNode() {
        var column = {
            cell: this.renderExpandedCell('body'),
            title: this.renderExpandedCell('header'),
            width: 50,
            className: this.getPrefix() + 'table-expanded',
            __mark: 'column',
            __type: 'expanded'
        };
        if (this.isOriginLock()) {
            column.lock = true;
        }
        return column;
    };

    Table.prototype.renderExpandedCell = function renderExpandedCell(type) {
        var _this3 = this;

        return function (value, index, record) {
            var getExpandedColProps = _this3.props.getExpandedColProps,
                prefix = _this3.getPrefix();

            if (type === 'header') {
                return '';
            } else {
                var _classnames;

                var expandedRowKeys = _this3.state.expandedRowKeys,
                    primaryKey = _this3.props.primaryKey,
                    switchNode = expandedRowKeys.indexOf(record[primaryKey]) > -1 ? _react2['default'].createElement(_nextIcon2['default'], { type: 'minus', size: 'xs' }) : _react2['default'].createElement(_nextIcon2['default'], { type: 'add', size: 'xs' }),
                    attrs = getExpandedColProps(record, index) || {},
                    cls = void 0;


                if (!attrs.disabled) {
                    attrs.onClick = _this3.onExpandedClick.bind(_this3, value, record, index);
                }
                cls = (0, _classnames7['default'])((_classnames = {}, _defineProperty(_classnames, prefix + 'table-expanded-ctrl', true), _defineProperty(_classnames, 'disabled', attrs.disabled), _defineProperty(_classnames, attrs.className, attrs.className), _classnames));
                return _react2['default'].createElement(
                    'span',
                    _extends({}, attrs, { className: cls }),
                    switchNode
                );
            }
        };
    };

    Table.prototype.onExpandedClick = function onExpandedClick(value, record, i, e) {
        var expandedRowKeys = [].concat(_toConsumableArray(this.state.expandedRowKeys)),
            primaryKey = this.props.primaryKey,
            id = record[primaryKey],
            index = expandedRowKeys.indexOf(id);

        if (index > -1) {
            expandedRowKeys.splice(index, 1);
        } else {
            expandedRowKeys.push(id);
        }
        if (!('expandedRowKeys' in this.props)) {
            this.setState({
                expandedRowKeys: expandedRowKeys
            });
        }
        this.props.onExpandedChange(expandedRowKeys, id, index === -1, record);
        e.stopPropagation();
    };

    Table.prototype.selectAllRow = function selectAllRow(checked, e) {
        var ret = [],
            records = [],
            _props2 = this.props,
            rowSelection = _props2.rowSelection,
            primaryKey = _props2.primaryKey,
            _state2 = this.state,
            dataSource = _state2.dataSource,
            hasListGroupHeader = _state2.hasListGroupHeader,
            selectedRowKeys = _state2.selectedRowKeys,
            getProps = rowSelection.getProps,
            attrs = {};


        if (hasListGroupHeader) {
            dataSource = this.flatDataSource(dataSource);
        }

        dataSource.forEach(function (record, index) {
            var id = record[primaryKey];
            if (getProps) {
                attrs = getProps(record, index) || {};
            }
            // 反选和全选的时候不要丢弃禁用项的选中状态
            if (checked && (!attrs.disabled || selectedRowKeys.indexOf(id) > -1)) {
                ret.push(id);
                records.push(record);
            } else if (attrs.disabled && selectedRowKeys.indexOf(id) > -1) {
                ret.push(id);
                records.push(record);
            }
        });
        if (typeof rowSelection.onSelectAll === 'function') {
            rowSelection.onSelectAll(checked, records);
        }
        this.triggerSelection(rowSelection, ret, records);
        e.stopPropagation();
    };

    Table.prototype.selectOneRow = function selectOneRow(index, record, checked, e) {
        var dataSource = this.state.dataSource,
            selectedRowKeys = [].concat(_toConsumableArray(this.state.selectedRowKeys)),
            _props3 = this.props,
            primaryKey = _props3.primaryKey,
            rowSelection = _props3.rowSelection,
            mode = rowSelection.mode ? rowSelection.mode : 'multiple',
            records = void 0,
            id = record[primaryKey],
            i = void 0;

        if (mode === 'multiple') {
            if (checked) {
                selectedRowKeys.push(id);
            } else {
                i = selectedRowKeys.indexOf(id);
                selectedRowKeys.splice(i, 1);
            }
        } else if (checked) {
            selectedRowKeys = [id];
        }

        records = dataSource.filter(function (item) {
            return selectedRowKeys.indexOf(item[primaryKey]) > -1;
        });
        if (typeof rowSelection.onSelect === 'function') {
            rowSelection.onSelect(checked, record, records);
        }
        this.triggerSelection(rowSelection, selectedRowKeys, records);

        e.stopPropagation();
    };

    Table.prototype.triggerSelection = function triggerSelection(rowSelection, selectedRowKeys, records) {
        if (!('selectedRowKeys' in rowSelection)) {
            this.setState({
                selectedRowKeys: selectedRowKeys
            });
        }
        if (typeof rowSelection.onChange === 'function') {
            rowSelection.onChange(selectedRowKeys, records);
        }
    };

    // 渲染头部


    Table.prototype.renderHeaderGroup = function renderHeaderGroup(groupChildren, flatChildren, lock) {
        var _this4 = this;

        var rowSpan = groupChildren.length,
            _props4 = this.props,
            locale = _props4.locale,
            filterParams = _props4.filterParams,
            onFilter = _props4.onFilter,
            prefix = this.getPrefix(),
            header = groupChildren.map(function (cols, index) {
            var col = cols.map(function (col, j) {
                var _classnames2;

                /* eslint-disable no-unused-vars */
                var title = col.title,
                    colSpan = col.colSpan,
                    sortable = col.sortable,
                    dataIndex = col.dataIndex,
                    filters = col.filters,
                    filterMode = col.filterMode,
                    width = col.width,
                    align = col.align,
                    className = col.className,
                    others = _objectWithoutProperties(col, ['title', 'colSpan', 'sortable', 'dataIndex', 'filters', 'filterMode', 'width', 'align', 'className']);

                others = (0, _nextUtil.pickAttrs)(others);

                if (typeof title === 'function') {
                    title = title();
                }

                className = (0, _classnames7['default'])((_classnames2 = {}, _defineProperty(_classnames2, prefix + 'table-header-node', true), _defineProperty(_classnames2, 'first', j === 0 && lock !== 'right'), _defineProperty(_classnames2, 'last', j === cols.length - 1 && lock !== 'left'), _defineProperty(_classnames2, className, className), _classnames2));

                others.style = others.style || {};
                others.className = className;
                if (align) {
                    others.style.textAlign = align;
                }
                if (col.__mark === 'column-group') {
                    return _react2['default'].createElement(
                        'th',
                        _extends({ colSpan: colSpan, key: j }, others, { ref: _this4.getHeaderRef(index, j, lock) }),
                        _react2['default'].createElement(
                            'div',
                            { className: prefix + 'table-cell-wrapper' },
                            title
                        )
                    );
                } else {
                    var sortElement = void 0,
                        filterElement = void 0;
                    if (sortable) {
                        sortElement = _this4.renderSort(dataIndex);
                    }
                    if (filters) {
                        filterElement = filters.length ? _react2['default'].createElement(_filter2['default'], { dataIndex: dataIndex,
                            filters: filters,
                            prefix: prefix,
                            locale: locale,
                            filterParams: filterParams,
                            filterMode: filterMode,
                            onFilter: onFilter }) : null;
                    }
                    return _react2['default'].createElement(
                        'th',
                        _extends({ rowSpan: rowSpan - index, key: j }, others, { ref: _this4.getHeaderRef(index, j, lock) }),
                        _react2['default'].createElement(
                            'div',
                            { className: prefix + 'table-cell-wrapper' },
                            title,
                            sortElement,
                            filterElement
                        )
                    );
                }
            });
            return _react2['default'].createElement(
                'tr',
                { key: index },
                col
            );
        }),
            colGroups = flatChildren.map(function (col, index) {
            var style = {},
                width = col.width;
            if (width) {
                style = {
                    width: width
                };
            }

            return _react2['default'].createElement('col', { style: style, key: index });
        });


        return _react2['default'].createElement(
            'div',
            { className: prefix + 'table-header-inner', ref: this.getTableRef(lock, 'innerHeader') },
            _react2['default'].createElement(
                'table',
                null,
                _react2['default'].createElement(
                    'colgroup',
                    null,
                    colGroups
                ),
                _react2['default'].createElement(
                    'tbody',
                    null,
                    header
                )
            )
        );
    };

    // 渲染排序


    Table.prototype.renderSort = function renderSort(dataIndex) {
        var sort = this.state.sort,
            prefix = this.getPrefix(),
            sortStatus = sort[dataIndex],
            map = {
            desc: 'descending',
            asc: 'ascending'
        };

        var icons = ['asc', 'desc'].map(function (sortOrder) {
            return _react2['default'].createElement(
                'a',
                { href: 'javascript:;',
                    key: sortOrder,
                    className: sortStatus === sortOrder ? 'current' : '' },
                _react2['default'].createElement(_nextIcon2['default'], { type: map[sortOrder], size: 'small' })
            );
        });

        return _react2['default'].createElement(
            'span',
            { className: prefix + 'table-sort',
                onClick: this._onSort.bind(this, dataIndex, sortStatus === 'asc' ? 'desc' : 'asc') },
            icons
        );
    };

    Table.prototype._onSort = function _onSort(dataIndex, order) {
        var _this5 = this;

        var sort = {};
        sort[dataIndex] = order;
        if (!('sort' in this.props)) {
            this.setState({
                sort: sort
            }, function () {
                _this5.props.onSort(dataIndex, order, sort);
            });
        } else {
            this.props.onSort(dataIndex, order, sort);
        }
    };

    // 获取表格的ref
    // 主要用于渲染完表格后进行宽度和高度的一些设置


    Table.prototype.getTableRef = function getTableRef(lock, type) {
        if (lock) {
            return 'lock_' + lock + type;
        } else {
            return type;
        }
    };

    // 通过头部和扁平的结构渲染表格


    Table.prototype.renderTable = function renderTable(groupChildren, flatChildren, lock) {
        var header = this.renderHeaderGroup(groupChildren, flatChildren, lock),
            rows = this.renderRows(flatChildren, lock),
            _props5 = this.props,
            hasHeader = _props5.hasHeader,
            fixedHeader = _props5.fixedHeader,
            maxBodyHeight = _props5.maxBodyHeight,
            prefix = this.getPrefix(),
            events = {
            onWheel: this.onBodyMouseWheel.bind(this)
        },
            style = {},
            bodyStyle = {};


        if (!lock) {
            events = {
                onScroll: this.onBodyScroll.bind(this)
            };
            if (fixedHeader) {
                style = {
                    paddingRight: getScrollbarSize().width
                };
                bodyStyle = {
                    maxHeight: maxBodyHeight
                };
            }
        }
        this.notRenderCellIndex = false;
        return _react2['default'].createElement(
            'div',
            { className: prefix + 'table-inner' },
            hasHeader ? _react2['default'].createElement(
                'div',
                { className: prefix + 'table-header', ref: this.getTableRef(lock, 'header'), style: style },
                header
            ) : null,
            _react2['default'].createElement(
                'div',
                _extends({ className: prefix + 'table-body' }, events, { ref: this.getTableRef(lock, 'body'),
                    style: bodyStyle }),
                rows
            )
        );
    };

    Table.prototype.onBodyMouseWheel = function onBodyMouseWheel(e) {
        var deltaY = e.deltaY;
        var scrollNode = findDOMNode(this.refs[this.getTableRef(false, 'body')]);
        this.scrollTo(scrollNode, scrollNode.scrollLeft, scrollNode.scrollTop + deltaY);
        if (scrollNode.scrollTop + scrollNode.clientHeight < scrollNode.scrollHeight && scrollNode.scrollTop) {
            e.preventDefault();
        }
    };

    Table.prototype.onBodyScroll = function onBodyScroll() {
        var scrollNode = findDOMNode(this.refs[this.getTableRef(false, 'body')]);
        this.scrollTo(scrollNode, scrollNode.scrollLeft, scrollNode.scrollTop);
    };

    Table.prototype.scrollTo = function scrollTo(scrollNode, x, y) {
        var header = findDOMNode(this.refs[this.getTableRef(false, 'innerHeader')]);

        if (header) {
            header.scrollLeft = x;
        }

        scrollNode.scrollTop = y;

        if (this.isLock()) {
            var lockRightBody = findDOMNode(this.refs[this.getTableRef('right', 'body')]),
                lockLeftBody = findDOMNode(this.refs[this.getTableRef('left', 'body')]),
                lockRightTable = findDOMNode(this.refs[this.getTableRef('right', 'lockWrapper')]),
                lockLeftTable = findDOMNode(this.refs[this.getTableRef('left', 'lockWrapper')]),
                shadowClassName = 'shadow';

            if (lockLeftBody) {
                lockLeftBody.scrollTop = y;
            }
            if (lockRightBody) {
                lockRightBody.scrollTop = y;
            }
            if (x === 0) {
                lockLeftTable && _nextDom.classList.removeClass(lockLeftTable, shadowClassName);
                lockRightTable && _nextDom.classList.addClass(lockRightTable, shadowClassName);
            } else if (x === scrollNode.scrollWidth - scrollNode.clientWidth) {
                lockLeftTable && _nextDom.classList.addClass(lockLeftTable, shadowClassName);
                lockRightTable && _nextDom.classList.removeClass(lockRightTable, shadowClassName);
            } else {
                lockLeftTable && _nextDom.classList.addClass(lockLeftTable, shadowClassName);
                lockRightTable && _nextDom.classList.addClass(lockRightTable, shadowClassName);
            }
        }
    };

    Table.prototype.renderRows = function renderRows(flatChildren, lock) {
        var _this6 = this;

        var dataSource = this.state.dataSource,
            _props6 = this.props,
            locale = _props6.locale,
            isLoading = _props6.isLoading,
            prefix = this.getPrefix(),
            rows = [],
            empty = isLoading ? null : locale.empty,
            needWrapper = false,
            colGroups = flatChildren.map(function (child, index) {
            return _react2['default'].createElement('col', { style: { width: child.width + 'px' }, key: index });
        });

        this._lastChildrenLength = 0;
        dataSource.forEach(function (record, index) {
            var row = _this6.renderRow(flatChildren, record, index, lock);
            if (row.needWrapper) {
                needWrapper = true;
                colGroups = row.colGroups;
                rows = rows.concat(row.node);
            } else {
                rows.push(row.node);
            }
        });
        this._lastChildrenLength = 0;
        if (!rows.length) {
            rows = _react2['default'].createElement(
                'table',
                null,
                _react2['default'].createElement(
                    'colgroup',
                    null,
                    colGroups
                ),
                _react2['default'].createElement(
                    'tbody',
                    null,
                    _react2['default'].createElement(
                        'tr',
                        null,
                        _react2['default'].createElement(
                            'td',
                            { colSpan: flatChildren.length },
                            _react2['default'].createElement(
                                'div',
                                { className: prefix + 'table-empty' },
                                empty
                            )
                        )
                    )
                )
            );
        }

        if (needWrapper) {
            return _react2['default'].createElement(
                'table',
                null,
                _react2['default'].createElement(
                    'colgroup',
                    null,
                    colGroups
                ),
                _react2['default'].createElement(
                    'tbody',
                    null,
                    rows
                )
            );
        } else {
            return rows;
        }
    };
    // Don't need recursion.


    Table.prototype.flatDataSource = function flatDataSource(dataSource) {
        var ret = [],
            listGroupHeader = this.state.listGroupHeader,
            hasSelection = listGroupHeader.hasSelection;


        dataSource.forEach(function (item) {
            var children = item.children;
            // 如果需要渲染selection才将这条记录插入到dataSource
            // 或者没有孩子节点
            if (hasSelection || !children) {
                ret.push(item);
            }
            if (children) {
                ret = ret.concat(children);
            }
        });
        return ret;
    };

    Table.prototype.analyseDataSource = function analyseDataSource(dataSource, props) {
        var isTree = props.isTree,
            result = [],
            loop = function loop(dataSource, level) {
            dataSource.forEach(function (item) {
                item.__level = level;
                result.push(item);
                if (item.children) {
                    loop(item.children, level + 1);
                }
            });
        };


        if (isTree) {
            loop(dataSource, 0);
        } else {
            result = dataSource;
        }
        return result;
    };

    Table.prototype.renderRow = function renderRow(flatChildren, record, index, lock) {
        var _this7 = this,
            _classnames3;

        index = index + this._lastChildrenLength;
        var _props7 = this.props,
            getRowClassName = _props7.getRowClassName,
            getRowProps = _props7.getRowProps,
            primaryKey = _props7.primaryKey,
            isTree = _props7.isTree,
            prefix = this.getPrefix(),
            _state3 = this.state,
            openRowKeys = _state3.openRowKeys,
            dataSource = _state3.dataSource,
            selectedRowKeys = _state3.selectedRowKeys,
            colGroups = [],
            listHeader = this.renderListGroupHeader(record, index),
            col = flatChildren.map(function (child, i) {
            var cell = _this7.renderCell(record, child, index, i, lock, flatChildren.length, listHeader);
            colGroups.push(cell.col);
            return cell.node;
        }),
            expandedRow = void 0,
            treeNodeStatus = this.getTreeNodeStatus(dataSource);


        expandedRow = this.renderExpandedRow(record, index, flatChildren.length, lock);
        if (expandedRow) {
            expandedRow = _react2['default'].cloneElement(expandedRow, {
                onClick: this._onExpandedRowClick.bind(this, record, index)
            });
        }
        var className = getRowClassName(record, index),
            otherProps = getRowProps(record, index),
            cls = (0, _classnames7['default'])((_classnames3 = {}, _defineProperty(_classnames3, prefix + 'table-row', true), _defineProperty(_classnames3, 'last', index === dataSource.length - 1), _defineProperty(_classnames3, 'first', index === 0), _defineProperty(_classnames3, 'hidden', isTree && !(treeNodeStatus.indexOf(record[primaryKey]) > -1) && record.__level !== 0), _defineProperty(_classnames3, prefix + 'table-row-level-' + record.__level, isTree), _defineProperty(_classnames3, 'opened', openRowKeys.indexOf(record[primaryKey]) > -1), _defineProperty(_classnames3, 'selected', !listHeader && selectedRowKeys.indexOf(record[primaryKey]) > -1), _defineProperty(_classnames3, className, className), _classnames3));

        var row = {};
        /* eslint-disable eqeqeq */
        var rowKey = record[primaryKey] != null && record[primaryKey] != '' ? record[primaryKey] : index;
        if (listHeader) {
            if (record.children && record.children.length) {
                colGroups = [];
                col = record.children.map(function (item, childIndex) {
                    var td = flatChildren.map(function (child, i) {
                        var cell = _this7.renderCell(item, child, index + childIndex + 1, i, lock, flatChildren.length);
                        if (colGroups.length !== flatChildren.length) {
                            colGroups.push(cell.col);
                        }
                        return cell.node;
                    });
                    return _react2['default'].createElement(
                        'tr',
                        { key: childIndex },
                        td
                    );
                });
                this._lastChildrenLength += record.children.length;
            } else {
                col = _react2['default'].createElement(
                    'tr',
                    { key: index },
                    col
                );
            }
            row.node = _react2['default'].createElement(
                'table',
                _extends({}, otherProps, { className: cls, key: rowKey, onClick: this._onRowClick.bind(this, record, index),
                    onMouseEnter: this._onRowHover.bind(this, record, index, true),
                    onMouseLeave: this._onRowHover.bind(this, record, index, false) }),
                _react2['default'].createElement(
                    'colgroup',
                    null,
                    colGroups
                ),
                _react2['default'].createElement(
                    'tbody',
                    null,
                    listHeader,
                    col,
                    expandedRow
                )
            );
        } else {
            row.node = [_react2['default'].createElement(
                'tr',
                _extends({}, otherProps, { className: cls, key: rowKey, onClick: this._onRowClick.bind(this, record, index), ref: this.getRowRef(index, lock),
                    onMouseEnter: this._onRowHover.bind(this, record, index, true),
                    onMouseLeave: this._onRowHover.bind(this, record, index, false) }),
                col
            ), expandedRow];
            row.needWrapper = true;
        }
        row.colGroups = colGroups;
        return row;
    };

    Table.prototype.getTreeNodeStatus = function getTreeNodeStatus(dataSource) {
        var openRowKeys = this.state.openRowKeys,
            primaryKey = this.props.primaryKey,
            res = [];


        openRowKeys.forEach(function (openKey) {
            dataSource.forEach(function (item) {
                if (item[primaryKey] === openKey) {
                    if (item.children) {
                        item.children.forEach(function (child) {
                            res.push(child[primaryKey]);
                        });
                    }
                }
            });
        });
        return res;
    };

    Table.prototype.renderExpandedRow = function renderExpandedRow(record, index, colSpan, lock) {
        var expandedRowRender = this.props.expandedRowRender;

        if (expandedRowRender) {
            var _props8 = this.props,
                primaryKey = _props8.primaryKey,
                expandedRowIndent = _props8.expandedRowIndent,
                prefix = this.getPrefix(),
                _state4 = this.state,
                expandedRowKeys = _state4.expandedRowKeys,
                lockLeftChildren = _state4.lockLeftChildren,
                lockRightChildren = _state4.lockRightChildren,
                _style = {
                display: expandedRowKeys.indexOf(record[primaryKey]) > -1 ? '' : 'none'
            },
                leftIndent = expandedRowIndent[0],
                rightIndent = expandedRowIndent[1],
                totalIndent = leftIndent + rightIndent,
                renderCols = function renderCols(number) {
                var result = [];
                for (var i = 0; i < number; i++) {
                    result.push(_react2['default'].createElement(
                        'td',
                        { key: i },
                        '\xA0'
                    ));
                }
                return result;
            },
                content = void 0;

            if (totalIndent > colSpan && !lock) {
                _nextUtil.log.warning('It\'s not allowed expandedRowIndent is more than the number of columns.');
            }
            if (leftIndent < lockLeftChildren.length) {
                _nextUtil.log.warning('expandedRowIndent left is less than the number of left lock columns.');
            }
            if (rightIndent < lockRightChildren.length) {
                _nextUtil.log.warning('expandedRowIndent right is less than the number of right lock columns.');
            }
            if (lock) {
                return _react2['default'].createElement(
                    'tr',
                    { className: prefix + 'table-expanded-row', style: _style, key: 'expanded-' + index },
                    _react2['default'].createElement(
                        'td',
                        { colSpan: colSpan, ref: this.getExpandedCellRef(index, 0, lock) },
                        ' '
                    )
                );
            }
            content = expandedRowRender(record, index);
            if (!_react2['default'].isValidElement(content)) {
                content = _react2['default'].createElement(
                    'div',
                    { className: prefix + 'table-cell-wrapper' },
                    content
                );
            }
            return _react2['default'].createElement(
                'tr',
                { className: prefix + 'table-expanded-row', style: _style, key: 'expanded-' + index },
                renderCols(leftIndent),
                _react2['default'].createElement(
                    'td',
                    { colSpan: colSpan - totalIndent, ref: this.getExpandedCellRef(index, 0, false) },
                    content
                ),
                renderCols(rightIndent)
            );
        } else {
            return null;
        }
    };

    Table.prototype.getRowRef = function getRowRef(i, lock) {
        if (lock) {
            return 'lock_row_' + lock + '_' + i;
        } else {
            return 'row_' + i;
        }
    };

    // 主要用于锁列的时候同步锁列和正常数据的高度


    Table.prototype.getCellRef = function getCellRef(i, j, lock) {
        if (lock) {
            return 'lock_' + lock + '_' + i + '_' + j;
        } else {
            return i + '_' + j;
        }
    };

    Table.prototype.getExpandedCellRef = function getExpandedCellRef(i, j, lock) {
        if (lock) {
            return 'lock_expanded_' + lock + '_' + i + '_' + j;
        } else {
            return 'expanded_' + i + '_' + j;
        }
    };

    Table.prototype.getHeaderRef = function getHeaderRef(i, j, lock) {
        if (lock) {
            return 'lock_header_' + lock + '_' + i + '_' + j;
        } else {
            return 'header_' + i + '_' + j;
        }
    };

    // Table处理过后真实的lock状态


    Table.prototype.isLock = function isLock() {
        if (this.state) {
            return !!this.state.lockLeftChildren.length || !!this.state.lockRightChildren.length;
        }
        return this._isLock;
    };
    // 用户设置的lock状态


    Table.prototype.isOriginLock = function isOriginLock() {
        return this._isLock;
    };
    //index: rowIndex
    //i: colIndex


    Table.prototype.renderCell = function renderCell(record, props, index, i, lock, flatChildrenLength, listGroup) {
        var _classnames4;

        if (lock === 'right') {
            i = i + (this.state.flatChildren.length - this.state.lockRightChildren.length);
        }
        var value = getDataByPath(record, props.dataIndex),
            cellProps = { value: value, index: index, record: record, context: this },
            content = void 0,
            style = void 0,
            align = props.align,
            _props9 = this.props,
            getCellProps = _props9.getCellProps,
            indentSize = _props9.indentSize,
            primaryKey = _props9.primaryKey,
            isTree = _props9.isTree,
            prefix = this.getPrefix(),
            ref = this.getCellRef(index, i, lock),
            attrs = getCellProps(index, i, record) || {},
            firstCellStyle = void 0,
            treeArrowNode = void 0;


        if (_react2['default'].isValidElement(props.cell)) {
            content = _react2['default'].cloneElement(props.cell, cellProps);
        } else if (typeof props.cell === 'function') {
            content = props.cell(value, index, record, this);
        }
        if (props.width) {
            style = {
                width: props.width
            };
        }

        if (this.notRenderCellIndex && !listGroup) {
            var matchCellIndex = this.notRenderCellIndex.map(function (cellIndex) {
                return cellIndex.toString();
            }).indexOf([index, i].toString());
            if (matchCellIndex > -1) {
                this.notRenderCellIndex.splice(matchCellIndex, 1);
                return {
                    node: null,
                    col: _react2['default'].createElement('col', { style: style, key: index + '_' + i })
                };
            }
        }

        if (attrs.colSpan && attrs.colSpan > 1 || attrs.rowSpan && attrs.rowSpan > 1) {
            if (lock) {
                this.rowSpanLock = true;
            }
            this._getNotRenderCellIndex(i, index, attrs.colSpan || 1, attrs.rowSpan || 1);
        }

        var cls = (0, _classnames7['default'])((_classnames4 = {}, _defineProperty(_classnames4, props.className, props.className), _defineProperty(_classnames4, prefix + 'table-cell', true), _defineProperty(_classnames4, 'first', lock !== 'right' && i === 0), _defineProperty(_classnames4, 'last', lock !== 'left' && (i === flatChildrenLength - 1 || i + attrs.colSpan === flatChildrenLength)), _classnames4));

        var treeArrowNodeIndex = this.props.rowSelection ? 1 : 0;

        if (isTree && lock !== 'right' && i === treeArrowNodeIndex) {
            firstCellStyle = {
                paddingLeft: indentSize * (record.__level + 1)
            };
            treeArrowNode = _react2['default'].createElement(_nextIcon2['default'], { size: 'xs', className: prefix + 'table-tree-placeholder' });

            var treeArrowType = void 0;

            if (record.children && record.children.length) {
                if (this.state.openRowKeys.indexOf(record[primaryKey]) > -1) {
                    treeArrowType = 'arrow-down';
                } else {
                    treeArrowType = 'arrow-right';
                }
                treeArrowNode = _react2['default'].createElement(_nextIcon2['default'], { type: treeArrowType, size: 'xs', onClick: this.onTreeNodeClick.bind(this, record) });
            }
        }

        var cellStyle = _extends({}, props.style);

        if (typeof align !== 'undefined') {
            cellStyle.textAlign = align;
        }

        return {
            node: _react2['default'].createElement(
                'td',
                _extends({ className: cls, style: cellStyle, ref: ref, key: index + '_' + i }, attrs),
                _react2['default'].createElement(
                    'div',
                    { className: prefix + 'table-cell-wrapper', style: firstCellStyle },
                    treeArrowNode,
                    content
                )
            ),
            col: _react2['default'].createElement('col', { style: style, key: index + '_' + i })
        };
    };

    Table.prototype._getNotRenderCellIndex = function _getNotRenderCellIndex(colIndex, rowIndex, colSpan, rowSpan) {
        var maxColIndex = colSpan;
        var maxRowIndex = rowSpan;
        var notRenderCellIndex = [];
        for (var i = 0; i < maxColIndex; i++) {
            for (var j = 0; j < maxRowIndex; j++) {
                notRenderCellIndex.push([rowIndex + j, colIndex + i]);
            }
        }
        if (!this.notRenderCellIndex) {
            this.notRenderCellIndex = [];
        }
        this.notRenderCellIndex = this.notRenderCellIndex.concat(notRenderCellIndex);
        return this.notRenderCellIndex;
    };

    Table.prototype.onTreeNodeClick = function onTreeNodeClick(record, e) {
        e.stopPropagation();
        var primaryKey = this.props.primaryKey,
            id = record[primaryKey],
            dataSource = this.state.dataSource,
            openRowKeys = [].concat(_toConsumableArray(this.state.openRowKeys)),
            index = openRowKeys.indexOf(id),
            getChildrenKeyById = function getChildrenKeyById(id) {
            var res = [id],
                loop = function loop(data) {
                data.forEach(function (item) {
                    res.push(item[primaryKey]);
                    if (item.children) {
                        loop(item.children);
                    }
                });
            };
            dataSource.forEach(function (item) {
                if (item[primaryKey] === id) {
                    if (item.children) {
                        loop(item.children);
                    }
                }
            });
            return res;
        };


        if (index > -1) {
            // 不仅要删除当前的openRowKey，还需要删除关联子节点的openRowKey
            var ids = getChildrenKeyById(id);
            ids.forEach(function (id) {
                var i = openRowKeys.indexOf(id);
                if (i > -1) {
                    openRowKeys.splice(i, 1);
                }
            });
        } else {
            openRowKeys.push(id);
        }

        if (!('openRowKeys' in this.props)) {
            this.setState({
                openRowKeys: openRowKeys
            });
        }
        this.props.onRowOpen(openRowKeys, id, index === -1, record);
    };

    // 渲染List模式的header


    Table.prototype.renderListGroupHeader = function renderListGroupHeader(record, index) {
        var _state5 = this.state,
            listGroupHeader = _state5.listGroupHeader,
            flatChildren = _state5.flatChildren,
            prefix = this.getPrefix(),
            listHeader = void 0;


        if (listGroupHeader) {
            var hasSelection = listGroupHeader.hasSelection;

            if (_react2['default'].isValidElement(listGroupHeader.cell)) {
                listHeader = _react2['default'].cloneElement(listGroupHeader.cell, { record: record, index: index });
            } else if (typeof listGroupHeader.cell === 'function') {
                listHeader = listGroupHeader.cell(record, index);
            }
            if (listHeader) {
                listHeader = _react2['default'].createElement(
                    'tr',
                    { className: prefix + 'table-group-header' },
                    hasSelection ? _react2['default'].createElement(
                        'td',
                        { className: prefix + 'table-selection' },
                        _react2['default'].createElement(
                            'div',
                            { className: prefix + 'table-cell-wrapper' },
                            this.renderSelectionCell('body')(null, index, record)
                        )
                    ) : null,
                    _react2['default'].createElement(
                        'td',
                        { colSpan: hasSelection ? flatChildren.length - 1 : flatChildren.length },
                        _react2['default'].createElement(
                            'div',
                            { className: prefix + 'table-cell-wrapper' },
                            listHeader
                        )
                    )
                );
            }
        }
        return listHeader;
    };

    Table.prototype._onRowClick = function _onRowClick(record, index, e) {
        this.props.onRowClick(record, index, e);
    };

    Table.prototype._onRowHover = function _onRowHover(record, index, isEnter, e) {
        var _props10 = this.props,
            onRowMouseEnter = _props10.onRowMouseEnter,
            onRowMouseLeave = _props10.onRowMouseLeave,
            currentTarget = e.currentTarget,
            isLock = this.isLock(),
            leftLockRow = void 0,
            rightLockRow = void 0,
            currentRow = _reactDom2['default'].findDOMNode(this.refs[this.getRowRef(index, false)]);

        if (isLock) {
            leftLockRow = _reactDom2['default'].findDOMNode(this.refs[this.getRowRef(index, 'left')]);
            rightLockRow = _reactDom2['default'].findDOMNode(this.refs[this.getRowRef(index, 'right')]);
        }

        if (isEnter) {
            onRowMouseEnter(record, index, e);
            currentRow && _nextDom.classList.addClass(currentRow, 'hovered');
            leftLockRow && _nextDom.classList.addClass(leftLockRow, 'hovered');
            rightLockRow && _nextDom.classList.addClass(rightLockRow, 'hovered');
        } else {
            onRowMouseLeave(record, index, e);
            currentRow && _nextDom.classList.removeClass(currentRow, 'hovered');
            leftLockRow && _nextDom.classList.removeClass(leftLockRow, 'hovered');
            rightLockRow && _nextDom.classList.removeClass(rightLockRow, 'hovered');
        }
    };

    Table.prototype._onExpandedRowClick = function _onExpandedRowClick(record, index, e) {
        e.stopPropagation();
        this.props.onExpandedRowClick(record, index, e);
    };

    Table.prototype.render = function render() {
        var _classnames5;

        var table = this.renderTable(this.state.groupChildren, this.state.flatChildren),
            _props11 = this.props,
            className = _props11.className,
            fixedHeader = _props11.fixedHeader,
            hasBorder = _props11.hasBorder,
            isZebra = _props11.isZebra,
            isLoading = _props11.isLoading,
            hasHeader = _props11.hasHeader,
            others = _objectWithoutProperties(_props11, ['className', 'fixedHeader', 'hasBorder', 'isZebra', 'isLoading', 'hasHeader']),
            prefix = this.getPrefix(),
            isLock = this.isLock(),
            cls = (0, _classnames7['default'])((_classnames5 = {}, _defineProperty(_classnames5, prefix + 'table', true), _defineProperty(_classnames5, prefix + 'table-fixed', fixedHeader), _defineProperty(_classnames5, prefix + 'table-group', this.state.hasListGroupHeader), _defineProperty(_classnames5, prefix + 'table-lock', isLock), _defineProperty(_classnames5, 'only-bottom-border', !hasBorder), _defineProperty(_classnames5, 'no-header', !hasHeader), _defineProperty(_classnames5, 'zebra', isZebra), _defineProperty(_classnames5, className, className), _classnames5)),
            loadingNode = isLoading ? _react2['default'].createElement(
            'div',
            { className: prefix + 'table-loading' },
            _react2['default'].createElement(_nextIcon2['default'], { type: 'loading', size: 'xl' })
        ) : null;


        others = (0, _nextUtil.pickAttrs)(others);
        if (!isLock) {
            return _react2['default'].createElement(
                'div',
                _extends({ className: cls }, others),
                table,
                loadingNode
            );
        } else {
            return _react2['default'].createElement(
                'div',
                _extends({ className: cls }, others),
                table,
                this.renderLockTable('left'),
                this.renderLockTable('right'),
                loadingNode
            );
        }
    };

    Table.prototype.renderLockTable = function renderLockTable(dir) {
        var prefix = this.getPrefix(),
            dirUpperCase = dir.charAt(0).toUpperCase() + dir.substring(1);

        if (this.state.dataSource.length) {
            return _react2['default'].createElement(
                'div',
                { className: prefix + 'table-lock-' + dir, ref: this.getTableRef(dir, 'lockWrapper') },
                this.renderTable(this.state['lock' + dirUpperCase + 'GroupChildren'], this.state['lock' + dirUpperCase + 'Children'], dir)
            );
        } else {
            return null;
        }
    };

    Table.prototype.componentDidMount = function componentDidMount() {
        this.adjustSize();
    };

    Table.prototype.componentDidUpdate = function componentDidUpdate() {
        this.adjustSize();
    };

    Table.prototype.adjustSize = function adjustSize() {
        this.adjustIfTableNotNeedLock();
        this.adjustCellSize();
        this.adjustBodySize();
        this.adjustHeaderSize();
        this.adjustFixedHeaderSize();
        this.onBodyScroll();
        this._notNeedAdjustLockLeft = this._notNeedAdjustLockRight = false;
    };

    Table.prototype.adjustCellSize = function adjustCellSize() {
        var _this8 = this;

        if (this.isLock()) {
            this.state.dataSource.forEach(function (item, index) {
                if (!_this8.rowSpanLock) {
                    _this8.setLeftCellSize(index, 0);
                    _this8.setRightCellSize(index, 0);
                } else {
                    var _state6 = _this8.state,
                        lockLeftChildren = _state6.lockLeftChildren,
                        lockRightChildren = _state6.lockRightChildren;
                    // 同步最左侧的锁列

                    lockLeftChildren.forEach(function (child, i) {
                        _this8.setLeftCellSize(index, i);
                    });
                    // 同步最右侧的锁列
                    lockRightChildren.forEach(function (child, i) {
                        _this8.setRightCellSize(index, i);
                    });
                }
            });
        }
    };

    Table.prototype.setLeftCellSize = function setLeftCellSize(index, i) {
        var lockLeftRow = findDOMNode(this.refs[this.getCellRef(index, i, 'left')]),
            row = this.getRowDOMNode(index, i),
            expandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, i, false)]),
            lockLeftExpandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, i, 'left')]),
            rowHeight = row && row.offsetHeight || 0;
        var expandedRowHeight = 0,
            lockLeftHeight = 0;

        if (lockLeftRow) {
            lockLeftHeight = lockLeftRow.offsetHeight;
        }
        if (expandedRow) {
            expandedRowHeight = expandedRow.offsetHeight;
        }
        lockLeftExpandedRow && _nextDom.style.set(lockLeftExpandedRow, 'height', expandedRowHeight + 'px');
        if (lockLeftRow && rowHeight !== lockLeftHeight) {
            _nextDom.style.set(lockLeftRow, 'height', rowHeight + 'px');
        }
    };

    Table.prototype.setRightCellSize = function setRightCellSize(index, i) {
        var lockRightStart = this.state.flatChildren.length - this.state.lockRightChildren.length;
        var lockRightRow = findDOMNode(this.refs[this.getCellRef(index, lockRightStart + i, 'right')]),
            row = this.getRowDOMNode(index, lockRightStart + i),
            expandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, lockRightStart + i, false)]),
            lockRightExpandedRow = findDOMNode(this.refs[this.getExpandedCellRef(index, lockRightStart + i, 'right')]),
            rowHeight = row && row.offsetHeight || 0;
        var lockRightHeight = 0,
            expandedRowHeight = 0;

        if (lockRightRow) {
            lockRightHeight = lockRightRow.offsetHeight;
        }
        if (expandedRow) {
            expandedRowHeight = expandedRow.offsetHeight;
        }
        lockRightExpandedRow && _nextDom.style.set(lockRightExpandedRow, 'height', expandedRowHeight + 'px');
        if (lockRightRow && rowHeight !== lockRightRow) {
            _nextDom.style.set(lockRightRow, 'height', rowHeight + 'px');
        }
    };

    Table.prototype.getRowDOMNode = function getRowDOMNode(index, i) {
        return findDOMNode(this.refs[this.getCellRef(index, i)]);
    };

    Table.prototype.adjustBodySize = function adjustBodySize() {
        if (this.isLock()) {
            var body = findDOMNode(this.refs[this.getTableRef(false, 'body')]),
                lockLeftBody = findDOMNode(this.refs[this.getTableRef('left', 'body')]),
                lockRightBody = findDOMNode(this.refs[this.getTableRef('right', 'body')]),
                lockRightBodyWrapper = findDOMNode(this.refs[this.getTableRef('right', 'lockWrapper')]),
                bodyHeight = body.offsetHeight,
                lockBodyHeight = void 0,
                width = 0;

            if (body.scrollHeight > body.clientHeight) {
                width = getScrollbarSize().width;
            }

            if (bodyHeight >= this.props.maxBodyHeight && this.props.fixedHeader) {
                lockBodyHeight = this.props.maxBodyHeight - getScrollbarSize().height;
                lockLeftBody && _nextDom.style.set(lockLeftBody, 'max-height', lockBodyHeight + 'px');
                lockRightBody && _nextDom.style.set(lockRightBody, 'max-height', lockBodyHeight + 'px');
                lockRightBodyWrapper && _nextDom.style.set(lockRightBodyWrapper, 'right', width + 'px');
            }
        }
    };

    Table.prototype.adjustHeaderSize = function adjustHeaderSize() {
        var _this9 = this;

        if (this.isLock()) {
            this.state.groupChildren.forEach(function (child, index) {
                var headerRow = findDOMNode(_this9.refs[_this9.getHeaderRef(index, 0, false)]),
                    headerRightLockRow = findDOMNode(_this9.refs[_this9.getHeaderRef(index, 0, 'right')]),
                    headerLeftLockRow = findDOMNode(_this9.refs[_this9.getHeaderRef(index, 0, 'left')]),
                    headerRowHeight = headerRow.offsetHeight,
                    headerRightLockRowHeight = 0,
                    headerLeftLockRowHeight = 0,
                    maxRowHeight = void 0;
                // 如果不需要锁列的出现，就不要在计算锁列的header的高度
                // 这在浏览器缩放的时候可能会造成高度计算的问题
                if (headerRightLockRow && !_this9._notNeedAdjustLockRight) {
                    headerRightLockRowHeight = headerRightLockRow.offsetHeight;
                }

                if (headerLeftLockRow && !_this9._notNeedAdjustLockLeft) {
                    headerLeftLockRowHeight = headerLeftLockRow.offsetHeight;
                }
                maxRowHeight = Math.max(headerRightLockRowHeight, headerLeftLockRowHeight, headerRowHeight);
                _nextDom.style.set(headerRow, 'height', maxRowHeight);
                headerRightLockRow && _nextDom.style.set(headerRightLockRow, 'height', maxRowHeight);
                headerLeftLockRow && _nextDom.style.set(headerLeftLockRow, 'height', maxRowHeight);
            });
        }
    };

    Table.prototype.adjustFixedHeaderSize = function adjustFixedHeaderSize() {
        var _props12 = this.props,
            hasHeader = _props12.hasHeader,
            fixedHeader = _props12.fixedHeader,
            maxBodyHeight = _props12.maxBodyHeight;

        if (hasHeader && fixedHeader) {
            var headerNode = findDOMNode(this.refs[this.getTableRef(false, 'header')]);
            var bodyNode = findDOMNode(this.refs[this.getTableRef(false, 'body')]);
            if (bodyNode.scrollHeight <= maxBodyHeight) {
                _nextDom.style.set(headerNode, 'paddingRight', 0);
            } else {
                _nextDom.style.set(headerNode, 'paddingRight', getScrollbarSize().width);
            }
        }
    };

    Table.prototype.adjustIfTableNotNeedLock = function adjustIfTableNotNeedLock() {
        var _this10 = this;

        if (this.isLock() && this.state.dataSource.length) {
            var configWidths = this.state.flatChildren.map(function (item, index) {
                var row = findDOMNode(_this10.refs[_this10.getCellRef(0, index)]);
                return row.clientWidth || 0;
            }).reduce(function (a, b) {
                return a + b;
            }, 0);
            var node = findDOMNode(this);
            var width = node.clientWidth;
            if (configWidths <= width) {
                if (this.state.lockLeftChildren.length) {
                    this.setState({
                        lockLeftChildren: []
                    });
                    this._notNeedAdjustLockLeft = true;
                }
                if (this.state.lockRightChildren.length) {
                    this.setState({
                        lockRightChildren: []
                    });
                    this._notNeedAdjustLockRight = true;
                }
            }
        }
    };

    return Table;
}(_react2['default'].Component), _class.propTypes = {
    /**
     * 样式类名的品牌前缀
     */
    prefix: _propTypes2['default'].string,
    /**
     * 自定义类名
     */
    className: _propTypes2['default'].string,
    /**
     * 自定义内联样式
     */
    style: _propTypes2['default'].object,
    /**
     * 表格展示的数据源
     */
    dataSource: _propTypes2['default'].array,
    /**
     * 是否启用选择模式
     * @property {Function} getProps `Function(record)=>Object` 获取selection的默认属性
     * @property {Function} onChange `Function(selectedRowKeys:Array, records:Array)` 选择改变的时候触发的事件，**注意:** 其中records只会包含当前dataSource的数据，很可能会小于selectedRowKeys的长度。
     * @property {Function} onSelect `Function(selected:Boolean, record:Object, records:Array)` 用户手动选择/取消选择某行的回调
     * @property {Function} onSelectAll `Function(selected:Boolean, records:Array)` 用户手动选择/取消选择所有行的回调
     * @property {Array} selectedRowKeys 设置了此属性,将rowSelection变为受控状态,接收值为该行数据的primaryKey的值
     * @property {String} mode 选择selection的模式, 可选值为`single`, `multiple`，默认为`multiple`
     */
    rowSelection: _propTypes2['default'].object,
    /**
     * 点击表格每一行触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onRowClick: _propTypes2['default'].func,
    /**
     * 悬浮在表格每一行的时候触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onRowMouseEnter: _propTypes2['default'].func,
    /**
     * 离开表格每一行的时候触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onRowMouseLeave: _propTypes2['default'].func,
    /**
     * 点击列排序触发的事件
     * @param {String} dataIndex 指定的排序的字段
     * @param {String} order 排序对应的顺序, 有`desc`和`asc`两种
     */
    onSort: _propTypes2['default'].func,
    /**
     * 点击过滤确认按钮触发的事件
     * @param {Object} filterParams 过滤的字段信息
     */
    onFilter: _propTypes2['default'].func,
    /**
     * 设置每一行的样式名称
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @returns {String} 需要设置的样式名称
     */
    getRowClassName: _propTypes2['default'].func,
    /**
     * 设置每一行的属性，如果返回值和其他针对行操作的属性冲突则无效。
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @returns {Object} 需要设置的行属性
     */
    getRowProps: _propTypes2['default'].func,
    /**
     * 设置单元格的属性，通过该属性可以进行合并单元格
     * @param {Number} rowIndex 该列所对应的序列
     * @param {Number} colIndex 该行所对应的序列
     * @param {Object} record 该行对应的记录
     * @returns {Object} 返回td元素的所支持的属性对象
     */
    getCellProps: _propTypes2['default'].func,
    /**
     * 表头是否固定，该属性配合maxBodyHeight使用，当内容区域的高度超过maxBodyHeight的时候，在内容区域会出现滚动条
     */
    fixedHeader: _propTypes2['default'].bool,
    /**
     * 最大内容区域的高度,在`fixedHeader`为`true`的时候,超过这个高度会出现滚动条
     */
    maxBodyHeight: _propTypes2['default'].number,
    /**
     * 表格是否具有边框
     */
    hasBorder: _propTypes2['default'].bool,
    /**
     * 表格是否具有头部
     */
    hasHeader: _propTypes2['default'].bool,
    /**
     * 表格是否是斑马线
     */
    isZebra: _propTypes2['default'].bool,
    /**
     * 表格是否在加载中
     */
    isLoading: _propTypes2['default'].bool,
    /**
     * dataSource当中数据的主键，如果给定的数据源中的属性不包含该主键，会造成选择状态全部选中
     */
    primaryKey: _propTypes2['default'].string,
    /**
     * 当前过滤的的keys,使用此属性可以控制表格的头部的过滤选项中哪个菜单被选中,格式为 {dataIndex: {selectedKeys:[]}}
     * 示例:
     * 假设要控制dataIndex为id的列的过滤菜单中key为one的菜单项选中
     * `<Table filterParams={{id: {selectedKeys: ['one']}}}/>`
     */
    filterParams: _propTypes2['default'].object,
    /**
     * 当前排序的字段,使用此属性可以控制表格的字段的排序,格式为{dataIndex: 'asc'}
     */
    sort: _propTypes2['default'].object,
    /**
     * 额外渲染行的渲染函数
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @returns {Element}
     */
    expandedRowRender: _propTypes2['default'].func,
    /**
     * 额外渲染行的缩进
     */
    expandedRowIndent: _propTypes2['default'].array,
    /**
     * 默认情况下展开的额外渲染行, 传入此属性为受控状态
     */
    expandedRowKeys: _propTypes2['default'].array,
    /**
     * 是否显示点击展开额外渲染行的+号按钮
     */
    hasExpandedRowCtrl: _propTypes2['default'].bool,
    /**
     * 设置额外渲染行的属性
     */
    getExpandedColProps: _propTypes2['default'].func,
    /**
     * 在额外渲染行展开或者收齐的时候触发的事件
     * @param {Array} expandedRowKeys 展开的渲染行的key
     * @param {String} currentRowKey 当前点击的渲染行的key
     * @param {Boolean} expanded 当前点击是展开还是收起
     * @param {Object} currentRecord 当前点击额外渲染行的记录
     */
    onExpandedChange: _propTypes2['default'].func,
    /**
     * 点击额外渲染行触发的事件
     * @param {Object} record 该行所对应的数据
     * @param {Number} index 该行所对应的序列
     * @param {Event} e DOM事件对象
     */
    onExpandedRowClick: _propTypes2['default'].func,
    /**
     * 在tree模式下的缩进尺寸， 仅在isTree为true时候有效
     */
    indentSize: _propTypes2['default'].number,
    /**
     * 默认情况下展开的树形表格，传入了此属性代表tree的展开为受控操作
     */
    openRowKeys: _propTypes2['default'].array,
    /**
     * 点击tree展开或者关闭的时候触发的事件
     * @param {Array} openRowKeys tree模式下展开的key
     * @param {String} currentRowKey 当前点击行的key
     * @param {Boolean} opened 当前点击是展开还是收起
     * @param {Object} currentRecord 当前点击行的记录
     */
    onRowOpen: _propTypes2['default'].func,
    /**
     * 开启Table的tree模式, 接收的数据格式中包含children则渲染成tree table
     */
    isTree: _propTypes2['default'].bool,
    /**
     * 是否开启性能优化，开启了性能优化后，会自动加入`shouldComponentUpdate`
     */
    optimization: _propTypes2['default'].bool,
    /**
     * 自定义国际化文案对象
     * @property {String} empty 没有数据时的提示文案
     * @property {String} ok 过滤器中确认按钮文案
     * @property {String} reset 过滤器中重置按钮文案
     */
    locale: _propTypes2['default'].object,
    /**
     * 自定义国际化语言
     */
    language: _propTypes2['default'].oneOf(['en-us', 'zh-cn', 'zh-tw'])
}, _class.defaultProps = {
    dataSource: [],
    rowSelection: null,
    onRowClick: noop,
    onRowMouseEnter: noop,
    onRowMouseLeave: noop,
    onSort: noop,
    onExpandedChange: noop,
    onExpandedRowClick: noop,
    expandedRowIndent: [1, 0],
    getExpandedColProps: noop,
    onFilter: noop,
    getRowClassName: noop,
    getRowProps: noop,
    getCellProps: noop,
    prefix: 'next-',
    fixedHeader: false,
    maxBodyHeight: 200,
    hasBorder: true,
    hasHeader: true,
    isZebra: false,
    isLoading: false,
    primaryKey: 'id',
    indentSize: 12,
    hasExpandedRowCtrl: true,
    onRowOpen: noop,
    isTree: false,
    optimization: false
}, _class.contextTypes = {
    prefix: _propTypes2['default'].string
}, _temp);
Table.displayName = 'Table';


function getDataByPath(object, path) {
    if (!object || !path) {
        return false;
    }
    path = path.toString();
    var field = path.split('.'),
        val = void 0,
        key = void 0;
    if (field.length) {
        key = field[0];
        //lists[1].name
        if (key.indexOf('[') >= 0) {
            key = key.match(/(.*)\[(.*)\]/);
            if (key) {
                val = object[key[1]][key[2]];
            }
        } else {
            val = object[field[0]];
        }
        if (val) {
            for (var i = 1; i < field.length; i++) {
                val = val[field[i]];
                if (typeof val === 'undefined') {
                    break;
                }
            }
        }
    }
    return val;
}

function deepCopy(arr) {
    var copy = function copy(arr) {
        return arr.map(function (item) {
            if (item.children) {
                item.children = copy(item.children);
            }
            return _extends({}, item);
        });
    };
    return copy(arr);
}

function shallowEqual(objA, objB, compare, compareContext) {
    var ret = compare ? compare.call(compareContext, objA, objB) : void 0;

    if (ret !== void 0) {
        return !!ret;
    }

    if (objA === objB) {
        return true;
    }

    if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
        return false;
    }

    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);

    var len = keysA.length;
    if (len !== keysB.length) {
        return false;
    }

    compareContext = compareContext || null;

    // Test for A's keys different from B.
    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
    for (var i = 0; i < len; i++) {
        var key = keysA[i];
        if (!bHasOwnProperty(key)) {
            return false;
        }
        var valueA = objA[key];
        var valueB = objB[key];

        var _ret = compare ? compare.call(compareContext, valueA, valueB, key) : void 0;
        if (_ret === false || _ret === void 0 && !shallowEqual(valueA, valueB)) {
            return false;
        }
    }

    return true;
}

exports.shallowEqual = shallowEqual;

exports['default'] = (0, _nextLocaleProvider2['default'])(Table);
module.exports = exports['default'];