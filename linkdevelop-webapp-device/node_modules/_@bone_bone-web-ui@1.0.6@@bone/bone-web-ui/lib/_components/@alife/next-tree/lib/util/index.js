'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.browser = browser;
exports.getOffset = getOffset;
exports.loopAllChildren = loopAllChildren;
exports.isInclude = isInclude;
exports.filterParentPosition = filterParentPosition;
exports.handleCheckState = handleCheckState;
exports.getCheck = getCheck;
exports.getStrictlyValue = getStrictlyValue;
exports.arraysEqual = arraysEqual;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function browser(navigator) {
    var tem = void 0;
    var ua = navigator.userAgent;
    var M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M[1])) {
        tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
        // eslint-disable-next-line
        return 'IE ' + (tem[1] || '');
    }
    if (M[1] === 'Chrome') {
        tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
        if (tem) {
            return tem.slice(1).join(' ').replace('OPR', 'Opera');
        }
    }
    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];
    tem = ua.match(/version\/(\d+)/i);
    if (tem) {
        M.splice(1, 1, tem[1]);
    }
    return M.join(' ');
}

function getOffset(elem) {
    var rect = elem.getBoundingClientRect();
    var win = elem.ownerDocument.defaultView;
    return {
        top: rect.top + win.pageYOffset,
        left: rect.left + win.pageXOffset
    };
}

function getChildrenlength(children) {
    var len = 1;
    if (Array.isArray(children)) {
        len = children.length;
    }
    return len;
}

function getSiblingPosition(index, len, siblingPosition) {
    if (len === 1) {
        siblingPosition.first = true;
        siblingPosition.last = true;
    } else {
        siblingPosition.first = index === 0;
        siblingPosition.last = index === len - 1;
    }
    return siblingPosition;
}

function loopAllChildren(childs, callback, parent) {
    var loop = function loop(children, level, _parent) {
        var len = getChildrenlength(children);
        _react2['default'].Children.forEach(children, function (item, index) {
            var pos = level + '-' + index;
            if (item.props && item.props.children && item.type && typeof item.type === 'function' && item.type.isTreeNode) {
                loop(item.props.children, pos, { node: item, pos: pos });
            }
            callback(item, index, pos, item.key || pos, getSiblingPosition(index, len, {}), _parent);
        });
    };
    loop(childs, 0, parent);
}

function isInclude(smallArray, bigArray) {
    return smallArray.every(function (ii, i) {
        return ii === bigArray[i];
    });
}

function filterParentPosition(arr) {
    var levelObj = {};
    arr.forEach(function (item) {
        var posLen = item.split('-').length;
        if (!levelObj[posLen]) {
            levelObj[posLen] = [];
        }
        levelObj[posLen].push(item);
    });
    var levelArr = Object.keys(levelObj).sort(function (a, b) {
        return Number(a) - Number(b);
    });

    var _loop = function _loop(i) {
        if (levelArr[i + 1]) {
            levelObj[levelArr[i]].forEach(function (ii) {
                var _loop2 = function _loop2(j) {
                    levelObj[levelArr[j]].forEach(function (_i, index) {
                        if (isInclude(ii.split('-'), _i.split('-'))) {
                            levelObj[levelArr[j]][index] = null;
                        }
                    });
                    levelObj[levelArr[j]] = levelObj[levelArr[j]].filter(function (p) {
                        return p;
                    });
                };

                for (var j = i + 1; j < levelArr.length; j++) {
                    _loop2(j);
                }
            });
        }
    };

    for (var i = 0; i < levelArr.length; i++) {
        _loop(i);
    }
    var nArr = [];
    levelArr.forEach(function (i) {
        nArr = nArr.concat(levelObj[i]);
    });
    return nArr;
}

function stripTail(str) {
    var arr = str.match(/(.+)(-[^-]+)$/);
    var st = '';
    if (arr && arr.length === 3) {
        st = arr[1];
    }
    return st;
}

function splitPosition(pos) {
    return pos.split('-');
}

function handleCheckState(obj, checkedPositionArr, checkIt) {
    var objKeys = Object.keys(obj);

    objKeys.forEach(function (i, index) {
        var iArr = splitPosition(i);
        var saved = false;
        checkedPositionArr.forEach(function (_pos) {
            var _posArr = splitPosition(_pos);
            if (iArr.length > _posArr.length && isInclude(_posArr, iArr)) {
                obj[i].halfChecked = false;
                obj[i].checked = checkIt;
                objKeys[index] = null;
            }
            if (iArr[0] === _posArr[0] && iArr[1] === _posArr[1]) {
                saved = true;
            }
        });
        if (!saved) {
            objKeys[index] = null;
        }
    });
    objKeys = objKeys.filter(function (i) {
        return i;
    });

    var _loop3 = function _loop3(_pIndex) {
        var loop = function loop(__pos) {
            var _posLen = splitPosition(__pos).length;
            if (_posLen <= 2) {
                return;
            }
            var sibling = 0;
            var siblingChecked = 0;
            var parentPosition = stripTail(__pos);
            objKeys.forEach(function (i) {
                var iArr = splitPosition(i);
                if (iArr.length === _posLen && isInclude(splitPosition(parentPosition), iArr)) {
                    sibling++;
                    if (obj[i].checked) {
                        siblingChecked++;
                        var _i = checkedPositionArr.indexOf(i);
                        if (_i > -1) {
                            checkedPositionArr.splice(_i, 1);
                            if (_i <= _pIndex) {
                                _pIndex--;
                            }
                        }
                    } else if (obj[i].halfChecked) {
                        siblingChecked += 0.5;
                    }
                }
            });

            var parent = obj[parentPosition];

            if (siblingChecked === 0) {
                parent.checked = false;
                parent.halfChecked = false;
            } else if (siblingChecked === sibling) {
                parent.checked = true;
                parent.halfChecked = false;
            } else {
                parent.halfChecked = true;
                parent.checked = false;
            }
            loop(parentPosition);
        };
        loop(checkedPositionArr[_pIndex], _pIndex);
        pIndex = _pIndex;
    };

    for (var pIndex = 0; pIndex < checkedPositionArr.length; pIndex++) {
        _loop3(pIndex);
    }
}

function getCheck(treeNodesStates) {
    var halfCheckedKeys = [];
    var checkedKeys = [];
    var checkedNodes = [];
    var checkedNodesPositions = [];
    Object.keys(treeNodesStates).forEach(function (item) {
        var itemObj = treeNodesStates[item];
        if (itemObj.checked) {
            checkedKeys.push(itemObj.key);
            checkedNodes.push(itemObj.node);
            checkedNodesPositions.push({ node: itemObj.node, pos: item });
        } else if (itemObj.halfChecked) {
            halfCheckedKeys.push(itemObj.key);
        }
    });
    return {
        halfCheckedKeys: halfCheckedKeys,
        checkedKeys: checkedKeys,
        checkedNodes: checkedNodes,
        checkedNodesPositions: checkedNodesPositions,
        treeNodesStates: treeNodesStates
    };
}

function getStrictlyValue(checkedKeys, halfChecked) {
    if (halfChecked) {
        return { checked: checkedKeys, halfChecked: halfChecked };
    }
    return checkedKeys;
}

function arraysEqual(a, b) {
    if (a === b) {
        return true;
    }
    if (a === null || typeof a === 'undefined' || b === null || typeof b === 'undefined') {
        return false;
    }
    if (a.length !== b.length) {
        return false;
    }

    for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i]) {
            return false;
        }
    }
    return true;
}